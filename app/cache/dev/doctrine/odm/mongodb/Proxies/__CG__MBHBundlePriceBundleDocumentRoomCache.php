<?php

namespace MongoDBODMProxies\__CG__\MBH\Bundle\PriceBundle\Document;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class RoomCache extends \MBH\Bundle\PriceBundle\Document\RoomCache implements \Doctrine\ODM\MongoDB\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'hotel', 'roomType', 'tariff', 'date', 'totalRooms', 'packagesCount', 'leftRooms', 'packageInfo', 'isClosed', 'id', 'isEnabled'];
        }

        return ['__isInitialized__', 'hotel', 'roomType', 'tariff', 'date', 'totalRooms', 'packagesCount', 'leftRooms', 'packageInfo', 'isClosed', 'id', 'isEnabled'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (RoomCache $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * {@inheritDoc}
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);

        parent::__clone();
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setHotel(\MBH\Bundle\HotelBundle\Document\Hotel $hotel)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHotel', [$hotel]);

        return parent::setHotel($hotel);
    }

    /**
     * {@inheritDoc}
     */
    public function getHotel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHotel', []);

        return parent::getHotel();
    }

    /**
     * {@inheritDoc}
     */
    public function setRoomType(\MBH\Bundle\HotelBundle\Document\RoomType $roomType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRoomType', [$roomType]);

        return parent::setRoomType($roomType);
    }

    /**
     * {@inheritDoc}
     */
    public function getRoomType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRoomType', []);

        return parent::getRoomType();
    }

    /**
     * {@inheritDoc}
     */
    public function setDate($date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDate', [$date]);

        return parent::setDate($date);
    }

    /**
     * {@inheritDoc}
     */
    public function getDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDate', []);

        return parent::getDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setTotalRooms($totalRooms)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTotalRooms', [$totalRooms]);

        return parent::setTotalRooms($totalRooms);
    }

    /**
     * {@inheritDoc}
     */
    public function getTotalRooms()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTotalRooms', []);

        return parent::getTotalRooms();
    }

    /**
     * {@inheritDoc}
     */
    public function setPackagesCount($packagesCount)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPackagesCount', [$packagesCount]);

        return parent::setPackagesCount($packagesCount);
    }

    /**
     * {@inheritDoc}
     */
    public function getPackagesCount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPackagesCount', []);

        return parent::getPackagesCount();
    }

    /**
     * {@inheritDoc}
     */
    public function packagesCountPercent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'packagesCountPercent', []);

        return parent::packagesCountPercent();
    }

    /**
     * {@inheritDoc}
     */
    public function setLeftRooms($leftRooms)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLeftRooms', [$leftRooms]);

        return parent::setLeftRooms($leftRooms);
    }

    /**
     * {@inheritDoc}
     */
    public function getLeftRooms()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLeftRooms', []);

        return parent::getLeftRooms();
    }

    /**
     * {@inheritDoc}
     */
    public function prePersist()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'prePersist', []);

        return parent::prePersist();
    }

    /**
     * {@inheritDoc}
     */
    public function preUpdate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'preUpdate', []);

        return parent::preUpdate();
    }

    /**
     * {@inheritDoc}
     */
    public function calcLeftRooms()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'calcLeftRooms', []);

        return parent::calcLeftRooms();
    }

    /**
     * {@inheritDoc}
     */
    public function setTariff(\MBH\Bundle\PriceBundle\Document\Tariff $tariff)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTariff', [$tariff]);

        return parent::setTariff($tariff);
    }

    /**
     * {@inheritDoc}
     */
    public function getTariff()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTariff', []);

        return parent::getTariff();
    }

    /**
     * {@inheritDoc}
     */
    public function addPackageInfo(\MBH\Bundle\PriceBundle\Document\PackageInfo $packageInfo)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addPackageInfo', [$packageInfo]);

        return parent::addPackageInfo($packageInfo);
    }

    /**
     * {@inheritDoc}
     */
    public function removePackageInfo(\MBH\Bundle\PriceBundle\Document\PackageInfo $packageInfo)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removePackageInfo', [$packageInfo]);

        return parent::removePackageInfo($packageInfo);
    }

    /**
     * {@inheritDoc}
     */
    public function getPackageInfo(\MBH\Bundle\PriceBundle\Document\Tariff $tariff = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPackageInfo', [$tariff]);

        return parent::getPackageInfo($tariff);
    }

    /**
     * {@inheritDoc}
     */
    public function getPackageCountByTariff(\MBH\Bundle\PriceBundle\Document\Tariff $tariff)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPackageCountByTariff', [$tariff]);

        return parent::getPackageCountByTariff($tariff);
    }

    /**
     * {@inheritDoc}
     */
    public function soldRefund(\MBH\Bundle\PriceBundle\Document\Tariff $tariff, $refund = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'soldRefund', [$tariff, $refund]);

        return parent::soldRefund($tariff, $refund);
    }

    /**
     * {@inheritDoc}
     */
    public function addPackage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addPackage', []);

        return parent::addPackage();
    }

    /**
     * {@inheritDoc}
     */
    public function removePackage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removePackage', []);

        return parent::removePackage();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsClosed($isClosed)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsClosed', [$isClosed]);

        return parent::setIsClosed($isClosed);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsClosed()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsClosed', []);

        return parent::getIsClosed();
    }

    /**
     * {@inheritDoc}
     */
    public function getIsEnabled()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsEnabled', []);

        return parent::getIsEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsEnabled($isEnabled)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsEnabled', [$isEnabled]);

        return parent::setIsEnabled($isEnabled);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

}
