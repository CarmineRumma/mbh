<?php

namespace MongoDBODMProxies\__CG__\MBH\Bundle\HotelBundle\Document;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class RoomType extends \MBH\Bundle\HotelBundle\Document\RoomType implements \Doctrine\ODM\MongoDB\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'hotel', 'rooms', 'fullTitle', 'title', 'description', 'color', 'places', 'additionalPlaces', 'roomSpace', 'image', 'isHostel', '' . "\0" . 'MBH\\Bundle\\HotelBundle\\Document\\RoomType' . "\0" . 'images', '' . "\0" . 'MBH\\Bundle\\HotelBundle\\Document\\RoomType' . "\0" . 'taskSettings', 'facilities', 'category', 'id', 'isEnabled', 'createdAt', 'updatedAt', 'deletedAt', 'createdBy', 'updatedBy', 'isChildPrices', 'isIndividualAdditionalPrices', 'internationalTitle'];
        }

        return ['__isInitialized__', 'hotel', 'rooms', 'fullTitle', 'title', 'description', 'color', 'places', 'additionalPlaces', 'roomSpace', 'image', 'isHostel', '' . "\0" . 'MBH\\Bundle\\HotelBundle\\Document\\RoomType' . "\0" . 'images', '' . "\0" . 'MBH\\Bundle\\HotelBundle\\Document\\RoomType' . "\0" . 'taskSettings', 'facilities', 'category', 'id', 'isEnabled', 'createdAt', 'updatedAt', 'deletedAt', 'createdBy', 'updatedBy', 'isChildPrices', 'isIndividualAdditionalPrices', 'internationalTitle'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (RoomType $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * {@inheritDoc}
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);

        parent::__clone();
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getHotel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHotel', []);

        return parent::getHotel();
    }

    /**
     * {@inheritDoc}
     */
    public function setHotel(\MBH\Bundle\HotelBundle\Document\Hotel $hotel)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHotel', [$hotel]);

        return parent::setHotel($hotel);
    }

    /**
     * {@inheritDoc}
     */
    public function getFullTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFullTitle', []);

        return parent::getFullTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setFullTitle($fullTitle)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFullTitle', [$fullTitle]);

        return parent::setFullTitle($fullTitle);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', []);

        return parent::getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitle($title)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitle', [$title]);

        return parent::setTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function getColor()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getColor', []);

        return parent::getColor();
    }

    /**
     * {@inheritDoc}
     */
    public function setColor($color)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setColor', [$color]);

        return parent::setColor($color);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function addRoom(\MBH\Bundle\HotelBundle\Document\Room $room)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addRoom', [$room]);

        return parent::addRoom($room);
    }

    /**
     * {@inheritDoc}
     */
    public function removeRoom(\MBH\Bundle\HotelBundle\Document\Room $room)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeRoom', [$room]);

        return parent::removeRoom($room);
    }

    /**
     * {@inheritDoc}
     */
    public function getRooms()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRooms', []);

        return parent::getRooms();
    }

    /**
     * {@inheritDoc}
     */
    public function getAdultsChildrenCombination($adults, $children, $useCategories = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAdultsChildrenCombination', [$adults, $children, $useCategories]);

        return parent::getAdultsChildrenCombination($adults, $children, $useCategories);
    }

    /**
     * {@inheritDoc}
     */
    public function getTotalPlaces()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTotalPlaces', []);

        return parent::getTotalPlaces();
    }

    /**
     * {@inheritDoc}
     */
    public function getPlaces()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPlaces', []);

        return parent::getPlaces();
    }

    /**
     * {@inheritDoc}
     */
    public function setPlaces($places)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPlaces', [$places]);

        return parent::setPlaces($places);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsHostel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsHostel', []);

        return parent::getIsHostel();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsHostel($isHostel)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsHostel', [$isHostel]);

        return parent::setIsHostel($isHostel);
    }

    /**
     * {@inheritDoc}
     */
    public function getAdditionalPlaces()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAdditionalPlaces', []);

        return parent::getAdditionalPlaces();
    }

    /**
     * {@inheritDoc}
     */
    public function setAdditionalPlaces($additionalPlaces)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAdditionalPlaces', [$additionalPlaces]);

        return parent::setAdditionalPlaces($additionalPlaces);
    }

    /**
     * {@inheritDoc}
     */
    public function getAdultsChildrenCombinations($useCategories = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAdultsChildrenCombinations', [$useCategories]);

        return parent::getAdultsChildrenCombinations($useCategories);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$description]);

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function setImage($image)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setImage', [$image]);

        return parent::setImage($image);
    }

    /**
     * {@inheritDoc}
     */
    public function getRoomSpace()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRoomSpace', []);

        return parent::getRoomSpace();
    }

    /**
     * {@inheritDoc}
     */
    public function setRoomSpace($roomSpace)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRoomSpace', [$roomSpace]);

        return parent::setRoomSpace($roomSpace);
    }

    /**
     * {@inheritDoc}
     */
    public function addImage(\MBH\Bundle\HotelBundle\Document\RoomTypeImage $image)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addImage', [$image]);

        return parent::addImage($image);
    }

    /**
     * {@inheritDoc}
     */
    public function removeImage(\MBH\Bundle\HotelBundle\Document\RoomTypeImage $image)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeImage', [$image]);

        return parent::removeImage($image);
    }

    /**
     * {@inheritDoc}
     */
    public function getMainImage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMainImage', []);

        return parent::getMainImage();
    }

    /**
     * {@inheritDoc}
     */
    public function getImages()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImages', []);

        return parent::getImages();
    }

    /**
     * {@inheritDoc}
     */
    public function deleteImageById($imageId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'deleteImageById', [$imageId]);

        return parent::deleteImageById($imageId);
    }

    /**
     * {@inheritDoc}
     */
    public function makeMainImageById($imageId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'makeMainImageById', [$imageId]);

        return parent::makeMainImageById($imageId);
    }

    /**
     * {@inheritDoc}
     */
    public function getTaskSettings()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTaskSettings', []);

        return parent::getTaskSettings();
    }

    /**
     * {@inheritDoc}
     */
    public function setTaskSettings(\MBH\Bundle\HotelBundle\Document\TaskSettings $taskSettings = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTaskSettings', [$taskSettings]);

        return parent::setTaskSettings($taskSettings);
    }

    /**
     * {@inheritDoc}
     */
    public function getFacilities()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFacilities', []);

        return parent::getFacilities();
    }

    /**
     * {@inheritDoc}
     */
    public function setFacilities($facilities)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFacilities', [$facilities]);

        return parent::setFacilities($facilities);
    }

    /**
     * {@inheritDoc}
     */
    public function getImage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImage', []);

        return parent::getImage();
    }

    /**
     * {@inheritDoc}
     */
    public function getCategory()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategory', []);

        return parent::getCategory();
    }

    /**
     * {@inheritDoc}
     */
    public function setCategory(\MBH\Bundle\HotelBundle\Document\RoomTypeCategory $category = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCategory', [$category]);

        return parent::setCategory($category);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsEnabled()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsEnabled', []);

        return parent::getIsEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsEnabled($isEnabled)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsEnabled', [$isEnabled]);

        return parent::setIsEnabled($isEnabled);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(\DateTime $createdAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt(\DateTime $updatedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$updatedAt]);

        return parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setDeletedAt(\DateTime $deletedAt = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDeletedAt', [$deletedAt]);

        return parent::setDeletedAt($deletedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getDeletedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDeletedAt', []);

        return parent::getDeletedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function isDeleted()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isDeleted', []);

        return parent::isDeleted();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedBy($createdBy)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedBy', [$createdBy]);

        return parent::setCreatedBy($createdBy);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedBy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedBy', []);

        return parent::getCreatedBy();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedBy($updatedBy)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedBy', [$updatedBy]);

        return parent::setUpdatedBy($updatedBy);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedBy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedBy', []);

        return parent::getUpdatedBy();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsChildPrices($isChildPrices)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsChildPrices', [$isChildPrices]);

        return parent::setIsChildPrices($isChildPrices);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsChildPrices()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsChildPrices', []);

        return parent::getIsChildPrices();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsIndividualAdditionalPrices($isIndividualAdditionalPrices)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsIndividualAdditionalPrices', [$isIndividualAdditionalPrices]);

        return parent::setIsIndividualAdditionalPrices($isIndividualAdditionalPrices);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsIndividualAdditionalPrices()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsIndividualAdditionalPrices', []);

        return parent::getIsIndividualAdditionalPrices();
    }

    /**
     * {@inheritDoc}
     */
    public function getInternationalTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInternationalTitle', []);

        return parent::getInternationalTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setInternationalTitle($internationalTitle)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setInternationalTitle', [$internationalTitle]);

        return parent::setInternationalTitle($internationalTitle);
    }

    /**
     * {@inheritDoc}
     */
    public function getLocaleTitle($locale = 'en')
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLocaleTitle', [$locale]);

        return parent::getLocaleTitle($locale);
    }

}
