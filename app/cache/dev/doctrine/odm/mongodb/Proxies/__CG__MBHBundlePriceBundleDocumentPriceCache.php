<?php

namespace MongoDBODMProxies\__CG__\MBH\Bundle\PriceBundle\Document;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class PriceCache extends \MBH\Bundle\PriceBundle\Document\PriceCache implements \Doctrine\ODM\MongoDB\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'hotel', 'roomType', 'roomTypeCategory', 'tariff', 'date', 'price', 'childPrice', 'isPersonPrice', 'additionalPrice', 'additionalPrices', 'additionalChildrenPrice', 'additionalChildrenPrices', 'singlePrice', 'id', 'isEnabled'];
        }

        return ['__isInitialized__', 'hotel', 'roomType', 'roomTypeCategory', 'tariff', 'date', 'price', 'childPrice', 'isPersonPrice', 'additionalPrice', 'additionalPrices', 'additionalChildrenPrice', 'additionalChildrenPrices', 'singlePrice', 'id', 'isEnabled'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (PriceCache $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * {@inheritDoc}
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);

        parent::__clone();
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setHotel(\MBH\Bundle\HotelBundle\Document\Hotel $hotel)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHotel', [$hotel]);

        return parent::setHotel($hotel);
    }

    /**
     * {@inheritDoc}
     */
    public function getHotel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHotel', []);

        return parent::getHotel();
    }

    /**
     * {@inheritDoc}
     */
    public function setRoomType(\MBH\Bundle\HotelBundle\Document\RoomType $roomType = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRoomType', [$roomType]);

        return parent::setRoomType($roomType);
    }

    /**
     * {@inheritDoc}
     */
    public function getRoomType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRoomType', []);

        return parent::getRoomType();
    }

    /**
     * {@inheritDoc}
     */
    public function setDate($date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDate', [$date]);

        return parent::setDate($date);
    }

    /**
     * {@inheritDoc}
     */
    public function getDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDate', []);

        return parent::getDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setTariff(\MBH\Bundle\PriceBundle\Document\Tariff $tariff)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTariff', [$tariff]);

        return parent::setTariff($tariff);
    }

    /**
     * {@inheritDoc}
     */
    public function getTariff()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTariff', []);

        return parent::getTariff();
    }

    /**
     * {@inheritDoc}
     */
    public function setPrice($price)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPrice', [$price]);

        return parent::setPrice($price);
    }

    /**
     * {@inheritDoc}
     */
    public function getPrice()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPrice', []);

        return parent::getPrice();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsPersonPrice($isPersonPrice)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsPersonPrice', [$isPersonPrice]);

        return parent::setIsPersonPrice($isPersonPrice);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsPersonPrice()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsPersonPrice', []);

        return parent::getIsPersonPrice();
    }

    /**
     * {@inheritDoc}
     */
    public function setAdditionalPrice($additionalPrice)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAdditionalPrice', [$additionalPrice]);

        return parent::setAdditionalPrice($additionalPrice);
    }

    /**
     * {@inheritDoc}
     */
    public function getAdditionalPrice()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAdditionalPrice', []);

        return parent::getAdditionalPrice();
    }

    /**
     * {@inheritDoc}
     */
    public function setAdditionalChildrenPrice($additionalChildrenPrice)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAdditionalChildrenPrice', [$additionalChildrenPrice]);

        return parent::setAdditionalChildrenPrice($additionalChildrenPrice);
    }

    /**
     * {@inheritDoc}
     */
    public function getAdditionalChildrenPrice()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAdditionalChildrenPrice', []);

        return parent::getAdditionalChildrenPrice();
    }

    /**
     * {@inheritDoc}
     */
    public function setSinglePrice($singlePrice)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSinglePrice', [$singlePrice]);

        return parent::setSinglePrice($singlePrice);
    }

    /**
     * {@inheritDoc}
     */
    public function getSinglePrice()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSinglePrice', []);

        return parent::getSinglePrice();
    }

    /**
     * {@inheritDoc}
     */
    public function getMaxIncome($places = NULL, $additionalPlaces = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMaxIncome', [$places, $additionalPlaces]);

        return parent::getMaxIncome($places, $additionalPlaces);
    }

    /**
     * {@inheritDoc}
     */
    public function getChildPrice()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChildPrice', []);

        return parent::getChildPrice();
    }

    /**
     * {@inheritDoc}
     */
    public function setChildPrice($childPrice)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setChildPrice', [$childPrice]);

        return parent::setChildPrice($childPrice);
    }

    /**
     * {@inheritDoc}
     */
    public function getAdditionalPrices()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAdditionalPrices', []);

        return parent::getAdditionalPrices();
    }

    /**
     * {@inheritDoc}
     */
    public function setAdditionalPrices(array $additionalPrices)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAdditionalPrices', [$additionalPrices]);

        return parent::setAdditionalPrices($additionalPrices);
    }

    /**
     * {@inheritDoc}
     */
    public function getAdditionalChildrenPrices()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAdditionalChildrenPrices', []);

        return parent::getAdditionalChildrenPrices();
    }

    /**
     * {@inheritDoc}
     */
    public function setAdditionalChildrenPrices(array $additionalChildrenPrices)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAdditionalChildrenPrices', [$additionalChildrenPrices]);

        return parent::setAdditionalChildrenPrices($additionalChildrenPrices);
    }

    /**
     * {@inheritDoc}
     */
    public function prePersist()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'prePersist', []);

        return parent::prePersist();
    }

    /**
     * {@inheritDoc}
     */
    public function preUpdate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'preUpdate', []);

        return parent::preUpdate();
    }

    /**
     * {@inheritDoc}
     */
    public function __call($name, array $arguments)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__call', [$name, $arguments]);

        return parent::__call($name, $arguments);
    }

    /**
     * {@inheritDoc}
     */
    public function getRoomTypeCategory()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRoomTypeCategory', []);

        return parent::getRoomTypeCategory();
    }

    /**
     * {@inheritDoc}
     */
    public function setRoomTypeCategory(\MBH\Bundle\HotelBundle\Document\RoomTypeCategory $roomTypeCategory = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRoomTypeCategory', [$roomTypeCategory]);

        return parent::setRoomTypeCategory($roomTypeCategory);
    }

    /**
     * {@inheritDoc}
     */
    public function setCategoryOrRoomType(\MBH\Bundle\HotelBundle\Model\RoomTypeInterface $room, $category = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCategoryOrRoomType', [$room, $category]);

        return parent::setCategoryOrRoomType($room, $category);
    }

    /**
     * {@inheritDoc}
     */
    public function getCategoryOrRoomType($category = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategoryOrRoomType', [$category]);

        return parent::getCategoryOrRoomType($category);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsEnabled()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsEnabled', []);

        return parent::getIsEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsEnabled($isEnabled)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsEnabled', [$isEnabled]);

        return parent::setIsEnabled($isEnabled);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

}
