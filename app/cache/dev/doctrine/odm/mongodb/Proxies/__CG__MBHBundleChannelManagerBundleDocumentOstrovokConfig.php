<?php

namespace MongoDBODMProxies\__CG__\MBH\Bundle\ChannelManagerBundle\Document;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class OstrovokConfig extends \MBH\Bundle\ChannelManagerBundle\Document\OstrovokConfig implements \Doctrine\ODM\MongoDB\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'hotel', 'hotelId', 'rooms', 'tariffs', 'services', 'id', 'isEnabled', 'createdAt', 'updatedAt', 'deletedAt', 'createdBy', 'updatedBy'];
        }

        return ['__isInitialized__', 'hotel', 'hotelId', 'rooms', 'tariffs', 'services', 'id', 'isEnabled', 'createdAt', 'updatedAt', 'deletedAt', 'createdBy', 'updatedBy'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (OstrovokConfig $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * {@inheritDoc}
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);

        parent::__clone();
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function getHotel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHotel', []);

        return parent::getHotel();
    }

    /**
     * {@inheritDoc}
     */
    public function setHotel(\MBH\Bundle\HotelBundle\Document\Hotel $hotel)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHotel', [$hotel]);

        return parent::setHotel($hotel);
    }

    /**
     * {@inheritDoc}
     */
    public function getHotelId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHotelId', []);

        return parent::getHotelId();
    }

    /**
     * {@inheritDoc}
     */
    public function setHotelId($hotelId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHotelId', [$hotelId]);

        return parent::setHotelId($hotelId);
    }

    /**
     * {@inheritDoc}
     */
    public function addRoom(\MBH\Bundle\ChannelManagerBundle\Document\Room $room)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addRoom', [$room]);

        return parent::addRoom($room);
    }

    /**
     * {@inheritDoc}
     */
    public function removeRoom(\MBH\Bundle\ChannelManagerBundle\Document\Room $room)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeRoom', [$room]);

        return parent::removeRoom($room);
    }

    /**
     * {@inheritDoc}
     */
    public function getRooms()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRooms', []);

        return parent::getRooms();
    }

    /**
     * {@inheritDoc}
     */
    public function addTariff(\MBH\Bundle\ChannelManagerBundle\Document\Tariff $tariff)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addTariff', [$tariff]);

        return parent::addTariff($tariff);
    }

    /**
     * {@inheritDoc}
     */
    public function removeTariff(\MBH\Bundle\ChannelManagerBundle\Document\Tariff $tariff)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeTariff', [$tariff]);

        return parent::removeTariff($tariff);
    }

    /**
     * {@inheritDoc}
     */
    public function getTariffs()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTariffs', []);

        return parent::getTariffs();
    }

    /**
     * {@inheritDoc}
     */
    public function removeAllRooms()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeAllRooms', []);

        return parent::removeAllRooms();
    }

    /**
     * {@inheritDoc}
     */
    public function removeAllTariffs()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeAllTariffs', []);

        return parent::removeAllTariffs();
    }

    /**
     * {@inheritDoc}
     */
    public function removeAllServices()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeAllServices', []);

        return parent::removeAllServices();
    }

    /**
     * {@inheritDoc}
     */
    public function addService(\MBH\Bundle\ChannelManagerBundle\Document\Service $service)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addService', [$service]);

        return parent::addService($service);
    }

    /**
     * {@inheritDoc}
     */
    public function removeService(\MBH\Bundle\ChannelManagerBundle\Document\Service $service)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeService', [$service]);

        return parent::removeService($service);
    }

    /**
     * {@inheritDoc}
     */
    public function getServices()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getServices', []);

        return parent::getServices();
    }

    /**
     * {@inheritDoc}
     */
    public function getIsEnabled()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsEnabled', []);

        return parent::getIsEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsEnabled($isEnabled)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsEnabled', [$isEnabled]);

        return parent::setIsEnabled($isEnabled);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getRoomsAsArray()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRoomsAsArray', []);

        return parent::getRoomsAsArray();
    }

    /**
     * {@inheritDoc}
     */
    public function getTariffsAsArray()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTariffsAsArray', []);

        return parent::getTariffsAsArray();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(\DateTime $createdAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt(\DateTime $updatedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$updatedAt]);

        return parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setDeletedAt(\DateTime $deletedAt = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDeletedAt', [$deletedAt]);

        return parent::setDeletedAt($deletedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getDeletedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDeletedAt', []);

        return parent::getDeletedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function isDeleted()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isDeleted', []);

        return parent::isDeleted();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedBy($createdBy)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedBy', [$createdBy]);

        return parent::setCreatedBy($createdBy);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedBy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedBy', []);

        return parent::getCreatedBy();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedBy($updatedBy)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedBy', [$updatedBy]);

        return parent::setUpdatedBy($updatedBy);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedBy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedBy', []);

        return parent::getUpdatedBy();
    }

}
