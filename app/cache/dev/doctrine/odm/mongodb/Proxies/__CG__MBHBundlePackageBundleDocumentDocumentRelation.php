<?php

namespace MongoDBODMProxies\__CG__\MBH\Bundle\PackageBundle\Document;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class DocumentRelation extends \MBH\Bundle\PackageBundle\Document\DocumentRelation implements \Doctrine\ODM\MongoDB\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'type', 'authorityOrgan', 'authorityOrganText', 'authorityOrganCode', 'authority', 'series', 'number', 'issued', 'expiry', 'relation'];
        }

        return ['__isInitialized__', 'type', 'authorityOrgan', 'authorityOrganText', 'authorityOrganCode', 'authority', 'series', 'number', 'issued', 'expiry', 'relation'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (DocumentRelation $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getType', []);

        return parent::getType();
    }

    /**
     * {@inheritDoc}
     */
    public function setType($type)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setType', [$type]);

        return parent::setType($type);
    }

    /**
     * {@inheritDoc}
     */
    public function getAuthorityOrgan()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAuthorityOrgan', []);

        return parent::getAuthorityOrgan();
    }

    /**
     * {@inheritDoc}
     */
    public function setAuthorityOrgan(\MBH\Bundle\VegaBundle\Document\VegaFMS $authorityOrgan = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAuthorityOrgan', [$authorityOrgan]);

        return parent::setAuthorityOrgan($authorityOrgan);
    }

    /**
     * {@inheritDoc}
     */
    public function getAuthority()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAuthority', []);

        return parent::getAuthority();
    }

    /**
     * {@inheritDoc}
     */
    public function getAuthorityOrganText()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAuthorityOrganText', []);

        return parent::getAuthorityOrganText();
    }

    /**
     * {@inheritDoc}
     */
    public function setAuthorityOrganText($authorityOrganText)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAuthorityOrganText', [$authorityOrganText]);

        return parent::setAuthorityOrganText($authorityOrganText);
    }

    /**
     * {@inheritDoc}
     */
    public function getAuthorityOrganCode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAuthorityOrganCode', []);

        return parent::getAuthorityOrganCode();
    }

    /**
     * {@inheritDoc}
     */
    public function setAuthorityOrganCode($authorityOrganCode)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAuthorityOrganCode', [$authorityOrganCode]);

        return parent::setAuthorityOrganCode($authorityOrganCode);
    }

    /**
     * {@inheritDoc}
     */
    public function setAuthority($authority)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAuthority', [$authority]);

        return parent::setAuthority($authority);
    }

    /**
     * {@inheritDoc}
     */
    public function getSeries()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSeries', []);

        return parent::getSeries();
    }

    /**
     * {@inheritDoc}
     */
    public function setSeries($series)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSeries', [$series]);

        return parent::setSeries($series);
    }

    /**
     * {@inheritDoc}
     */
    public function getNumber()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNumber', []);

        return parent::getNumber();
    }

    /**
     * {@inheritDoc}
     */
    public function setNumber($number)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNumber', [$number]);

        return parent::setNumber($number);
    }

    /**
     * {@inheritDoc}
     */
    public function getIssued()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIssued', []);

        return parent::getIssued();
    }

    /**
     * {@inheritDoc}
     */
    public function setIssued(\DateTime $issued = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIssued', [$issued]);

        return parent::setIssued($issued);
    }

    /**
     * {@inheritDoc}
     */
    public function getExpiry()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExpiry', []);

        return parent::getExpiry();
    }

    /**
     * {@inheritDoc}
     */
    public function setExpiry(\DateTime $expiry = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExpiry', [$expiry]);

        return parent::setExpiry($expiry);
    }

    /**
     * {@inheritDoc}
     */
    public function getRelation()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRelation', []);

        return parent::getRelation();
    }

    /**
     * {@inheritDoc}
     */
    public function setRelation($relation)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRelation', [$relation]);

        return parent::setRelation($relation);
    }

    /**
     * {@inheritDoc}
     */
    public function isDateRangeValid()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isDateRangeValid', []);

        return parent::isDateRangeValid();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function prePersist()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'prePersist', []);

        return parent::prePersist();
    }

    /**
     * {@inheritDoc}
     */
    public function jsonSerialize()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'jsonSerialize', []);

        return parent::jsonSerialize();
    }

}
