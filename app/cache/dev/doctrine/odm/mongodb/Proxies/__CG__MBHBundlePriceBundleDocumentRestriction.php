<?php

namespace MongoDBODMProxies\__CG__\MBH\Bundle\PriceBundle\Document;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Restriction extends \MBH\Bundle\PriceBundle\Document\Restriction implements \Doctrine\ODM\MongoDB\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'hotel', 'roomType', 'tariff', 'date', 'minStay', 'maxStay', 'minStayArrival', 'maxStayArrival', 'minBeforeArrival', 'maxBeforeArrival', 'closedOnArrival', 'closedOnDeparture', 'closed', 'id', 'isEnabled'];
        }

        return ['__isInitialized__', 'hotel', 'roomType', 'tariff', 'date', 'minStay', 'maxStay', 'minStayArrival', 'maxStayArrival', 'minBeforeArrival', 'maxBeforeArrival', 'closedOnArrival', 'closedOnDeparture', 'closed', 'id', 'isEnabled'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Restriction $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * {@inheritDoc}
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);

        parent::__clone();
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setHotel(\MBH\Bundle\HotelBundle\Document\Hotel $hotel)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHotel', [$hotel]);

        return parent::setHotel($hotel);
    }

    /**
     * {@inheritDoc}
     */
    public function getHotel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHotel', []);

        return parent::getHotel();
    }

    /**
     * {@inheritDoc}
     */
    public function setRoomType(\MBH\Bundle\HotelBundle\Document\RoomType $roomType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRoomType', [$roomType]);

        return parent::setRoomType($roomType);
    }

    /**
     * {@inheritDoc}
     */
    public function getRoomType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRoomType', []);

        return parent::getRoomType();
    }

    /**
     * {@inheritDoc}
     */
    public function setTariff(\MBH\Bundle\PriceBundle\Document\Tariff $tariff)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTariff', [$tariff]);

        return parent::setTariff($tariff);
    }

    /**
     * {@inheritDoc}
     */
    public function getTariff()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTariff', []);

        return parent::getTariff();
    }

    /**
     * {@inheritDoc}
     */
    public function setDate($date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDate', [$date]);

        return parent::setDate($date);
    }

    /**
     * {@inheritDoc}
     */
    public function getDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDate', []);

        return parent::getDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setMinStay($minStay)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMinStay', [$minStay]);

        return parent::setMinStay($minStay);
    }

    /**
     * {@inheritDoc}
     */
    public function getMinStay()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMinStay', []);

        return parent::getMinStay();
    }

    /**
     * {@inheritDoc}
     */
    public function setMaxStay($maxStay)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMaxStay', [$maxStay]);

        return parent::setMaxStay($maxStay);
    }

    /**
     * {@inheritDoc}
     */
    public function getMaxStay()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMaxStay', []);

        return parent::getMaxStay();
    }

    /**
     * {@inheritDoc}
     */
    public function setMinStayArrival($minStayArrival)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMinStayArrival', [$minStayArrival]);

        return parent::setMinStayArrival($minStayArrival);
    }

    /**
     * {@inheritDoc}
     */
    public function getMinStayArrival()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMinStayArrival', []);

        return parent::getMinStayArrival();
    }

    /**
     * {@inheritDoc}
     */
    public function setMaxStayArrival($maxStayArrival)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMaxStayArrival', [$maxStayArrival]);

        return parent::setMaxStayArrival($maxStayArrival);
    }

    /**
     * {@inheritDoc}
     */
    public function getMaxStayArrival()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMaxStayArrival', []);

        return parent::getMaxStayArrival();
    }

    /**
     * {@inheritDoc}
     */
    public function setMinBeforeArrival($minBeforeArrival)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMinBeforeArrival', [$minBeforeArrival]);

        return parent::setMinBeforeArrival($minBeforeArrival);
    }

    /**
     * {@inheritDoc}
     */
    public function getMinBeforeArrival()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMinBeforeArrival', []);

        return parent::getMinBeforeArrival();
    }

    /**
     * {@inheritDoc}
     */
    public function setMaxBeforeArrival($maxBeforeArrival)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMaxBeforeArrival', [$maxBeforeArrival]);

        return parent::setMaxBeforeArrival($maxBeforeArrival);
    }

    /**
     * {@inheritDoc}
     */
    public function getMaxBeforeArrival()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMaxBeforeArrival', []);

        return parent::getMaxBeforeArrival();
    }

    /**
     * {@inheritDoc}
     */
    public function setClosedOnArrival($closedOnArrival)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setClosedOnArrival', [$closedOnArrival]);

        return parent::setClosedOnArrival($closedOnArrival);
    }

    /**
     * {@inheritDoc}
     */
    public function getClosedOnArrival()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getClosedOnArrival', []);

        return parent::getClosedOnArrival();
    }

    /**
     * {@inheritDoc}
     */
    public function setClosedOnDeparture($closedOnDeparture)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setClosedOnDeparture', [$closedOnDeparture]);

        return parent::setClosedOnDeparture($closedOnDeparture);
    }

    /**
     * {@inheritDoc}
     */
    public function getClosedOnDeparture()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getClosedOnDeparture', []);

        return parent::getClosedOnDeparture();
    }

    /**
     * {@inheritDoc}
     */
    public function setClosed($closed)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setClosed', [$closed]);

        return parent::setClosed($closed);
    }

    /**
     * {@inheritDoc}
     */
    public function getClosed()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getClosed', []);

        return parent::getClosed();
    }

    /**
     * {@inheritDoc}
     */
    public function getIsEnabled()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsEnabled', []);

        return parent::getIsEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsEnabled($isEnabled)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsEnabled', [$isEnabled]);

        return parent::setIsEnabled($isEnabled);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

}
