<?php

namespace MongoDBODMProxies\__CG__\MBH\Bundle\CashBundle\Document;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class CashDocument extends \MBH\Bundle\CashBundle\Document\CashDocument implements \Doctrine\ODM\MongoDB\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'order', 'number', 'method', 'total', 'operation', 'note', 'isConfirmed', 'isPaid', 'documentDate', 'paidDate', 'organizationPayer', 'touristPayer', 'orderDocument', 'article', 'id', 'isEnabled', 'createdAt', 'updatedAt', 'deletedAt', 'createdBy', 'updatedBy'];
        }

        return ['__isInitialized__', 'order', 'number', 'method', 'total', 'operation', 'note', 'isConfirmed', 'isPaid', 'documentDate', 'paidDate', 'organizationPayer', 'touristPayer', 'orderDocument', 'article', 'id', 'isEnabled', 'createdAt', 'updatedAt', 'deletedAt', 'createdBy', 'updatedBy'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (CashDocument $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * {@inheritDoc}
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);

        parent::__clone();
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setMethod($method)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMethod', [$method]);

        return parent::setMethod($method);
    }

    /**
     * {@inheritDoc}
     */
    public function getMethod()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMethod', []);

        return parent::getMethod();
    }

    /**
     * {@inheritDoc}
     */
    public function setTotal($total)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTotal', [$total]);

        return parent::setTotal($total);
    }

    /**
     * {@inheritDoc}
     */
    public function getTotal()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTotal', []);

        return parent::getTotal();
    }

    /**
     * {@inheritDoc}
     */
    public function setOperation($operation)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOperation', [$operation]);

        return parent::setOperation($operation);
    }

    /**
     * {@inheritDoc}
     */
    public function getOperation()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOperation', []);

        return parent::getOperation();
    }

    /**
     * {@inheritDoc}
     */
    public function setNote($note)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNote', [$note]);

        return parent::setNote($note);
    }

    /**
     * {@inheritDoc}
     */
    public function getNote()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNote', []);

        return parent::getNote();
    }

    /**
     * {@inheritDoc}
     */
    public function getNumber()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNumber', []);

        return parent::getNumber();
    }

    /**
     * {@inheritDoc}
     */
    public function setNumber($number)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNumber', [$number]);

        return parent::setNumber($number);
    }

    /**
     * {@inheritDoc}
     */
    public function prePersist()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'prePersist', []);

        return parent::prePersist();
    }

    /**
     * {@inheritDoc}
     */
    public function preUpdate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'preUpdate', []);

        return parent::preUpdate();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsConfirmed($isConfirmed)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsConfirmed', [$isConfirmed]);

        return parent::setIsConfirmed($isConfirmed);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsConfirmed()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsConfirmed', []);

        return parent::getIsConfirmed();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsPaid($isPaid)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsPaid', [$isPaid]);

        return parent::setIsPaid($isPaid);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsPaid()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsPaid', []);

        return parent::getIsPaid();
    }

    /**
     * {@inheritDoc}
     */
    public function getHotel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHotel', []);

        return parent::getHotel();
    }

    /**
     * {@inheritDoc}
     */
    public function getPayer()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPayer', []);

        return parent::getPayer();
    }

    /**
     * {@inheritDoc}
     */
    public function setOrder(\MBH\Bundle\PackageBundle\Document\Order $order = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOrder', [$order]);

        return parent::setOrder($order);
    }

    /**
     * {@inheritDoc}
     */
    public function getOrder()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOrder', []);

        return parent::getOrder();
    }

    /**
     * {@inheritDoc}
     */
    public function getDocumentDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDocumentDate', []);

        return parent::getDocumentDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setDocumentDate(\DateTime $documentDate = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDocumentDate', [$documentDate]);

        return parent::setDocumentDate($documentDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getPaidDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPaidDate', []);

        return parent::getPaidDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setPaidDate(\DateTime $paidDate = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPaidDate', [$paidDate]);

        return parent::setPaidDate($paidDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getOrganizationPayer()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOrganizationPayer', []);

        return parent::getOrganizationPayer();
    }

    /**
     * {@inheritDoc}
     */
    public function setOrganizationPayer(\MBH\Bundle\PackageBundle\Document\Organization $organizationPayer = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOrganizationPayer', [$organizationPayer]);

        return parent::setOrganizationPayer($organizationPayer);
    }

    /**
     * {@inheritDoc}
     */
    public function getTouristPayer()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTouristPayer', []);

        return parent::getTouristPayer();
    }

    /**
     * {@inheritDoc}
     */
    public function setTouristPayer(\MBH\Bundle\PackageBundle\Document\Tourist $touristPayer = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTouristPayer', [$touristPayer]);

        return parent::setTouristPayer($touristPayer);
    }

    /**
     * {@inheritDoc}
     */
    public function isValidDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isValidDate', []);

        return parent::isValidDate();
    }

    /**
     * {@inheritDoc}
     */
    public function getOrderDocument()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOrderDocument', []);

        return parent::getOrderDocument();
    }

    /**
     * {@inheritDoc}
     */
    public function getArticle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getArticle', []);

        return parent::getArticle();
    }

    /**
     * {@inheritDoc}
     */
    public function setArticle(\MBH\Bundle\CashBundle\Document\CashDocumentArticle $article = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setArticle', [$article]);

        return parent::setArticle($article);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsEnabled()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsEnabled', []);

        return parent::getIsEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsEnabled($isEnabled)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsEnabled', [$isEnabled]);

        return parent::setIsEnabled($isEnabled);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(\DateTime $createdAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt(\DateTime $updatedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$updatedAt]);

        return parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setDeletedAt(\DateTime $deletedAt = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDeletedAt', [$deletedAt]);

        return parent::setDeletedAt($deletedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getDeletedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDeletedAt', []);

        return parent::getDeletedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function isDeleted()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isDeleted', []);

        return parent::isDeleted();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedBy($createdBy)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedBy', [$createdBy]);

        return parent::setCreatedBy($createdBy);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedBy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedBy', []);

        return parent::getCreatedBy();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedBy($updatedBy)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedBy', [$updatedBy]);

        return parent::setUpdatedBy($updatedBy);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedBy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedBy', []);

        return parent::getUpdatedBy();
    }

}
