<?php

namespace Hydrators;

use Doctrine\ODM\MongoDB\DocumentManager;
use Doctrine\ODM\MongoDB\Mapping\ClassMetadata;
use Doctrine\ODM\MongoDB\Hydrator\HydratorInterface;
use Doctrine\ODM\MongoDB\UnitOfWork;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ODM. DO NOT EDIT THIS FILE.
 */
class MBHBundlePriceBundleDocumentTariffHydrator implements HydratorInterface
{
    private $dm;
    private $unitOfWork;
    private $class;

    public function __construct(DocumentManager $dm, UnitOfWork $uow, ClassMetadata $class)
    {
        $this->dm = $dm;
        $this->unitOfWork = $uow;
        $this->class = $class;
    }

    public function hydrate($document, $data, array $hints = array())
    {
        $hydratedData = array();

        /** @ReferenceOne */
        if (isset($data['hotel'])) {
            $reference = $data['hotel'];
            if (isset($this->class->fieldMappings['hotel']['simple']) && $this->class->fieldMappings['hotel']['simple']) {
                $className = $this->class->fieldMappings['hotel']['targetDocument'];
                $mongoId = $reference;
            } else {
                $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['hotel'], $reference);
                $mongoId = $reference['$id'];
            }
            $targetMetadata = $this->dm->getClassMetadata($className);
            $id = $targetMetadata->getPHPIdentifierValue($mongoId);
            $return = $this->dm->getReference($className, $id);
            $this->class->reflFields['hotel']->setValue($document, $return);
            $hydratedData['hotel'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['fullTitle'])) {
            $value = $data['fullTitle'];
            $return = (string) $value;
            $this->class->reflFields['fullTitle']->setValue($document, $return);
            $hydratedData['fullTitle'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['title'])) {
            $value = $data['title'];
            $return = (string) $value;
            $this->class->reflFields['title']->setValue($document, $return);
            $hydratedData['title'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['description'])) {
            $value = $data['description'];
            $return = (string) $value;
            $this->class->reflFields['description']->setValue($document, $return);
            $hydratedData['description'] = $return;
        }

        /** @Field(type="boolean") */
        if (isset($data['isDefault'])) {
            $value = $data['isDefault'];
            $return = (bool) $value;
            $this->class->reflFields['isDefault']->setValue($document, $return);
            $hydratedData['isDefault'] = $return;
        }

        /** @Field(type="boolean") */
        if (isset($data['isOnline'])) {
            $value = $data['isOnline'];
            $return = (bool) $value;
            $this->class->reflFields['isOnline']->setValue($document, $return);
            $hydratedData['isOnline'] = $return;
        }

        /** @Field(type="date") */
        if (isset($data['begin'])) {
            $value = $data['begin'];
            if ($value === null) { $return = null; } else { $return = \Doctrine\ODM\MongoDB\Types\DateType::getDateTime($value); }
            $this->class->reflFields['begin']->setValue($document, clone $return);
            $hydratedData['begin'] = $return;
        }

        /** @Field(type="date") */
        if (isset($data['end'])) {
            $value = $data['end'];
            if ($value === null) { $return = null; } else { $return = \Doctrine\ODM\MongoDB\Types\DateType::getDateTime($value); }
            $this->class->reflFields['end']->setValue($document, clone $return);
            $hydratedData['end'] = $return;
        }

        /** @Field(type="integer") */
        if (isset($data['childAge'])) {
            $value = $data['childAge'];
            $return = (int) $value;
            $this->class->reflFields['childAge']->setValue($document, $return);
            $hydratedData['childAge'] = $return;
        }

        /** @Field(type="integer") */
        if (isset($data['infantAge'])) {
            $value = $data['infantAge'];
            $return = (int) $value;
            $this->class->reflFields['infantAge']->setValue($document, $return);
            $hydratedData['infantAge'] = $return;
        }

        /** @Many */
        $mongoData = isset($data['promotions']) ? $data['promotions'] : null;
        $return = new \Doctrine\ODM\MongoDB\PersistentCollection(new \Doctrine\Common\Collections\ArrayCollection(), $this->dm, $this->unitOfWork);
        $return->setHints($hints);
        $return->setOwner($document, $this->class->fieldMappings['promotions']);
        $return->setInitialized(false);
        if ($mongoData) {
            $return->setMongoData($mongoData);
        }
        $this->class->reflFields['promotions']->setValue($document, $return);
        $hydratedData['promotions'] = $return;

        /** @Many */
        $mongoData = isset($data['restrictions']) ? $data['restrictions'] : null;
        $return = new \Doctrine\ODM\MongoDB\PersistentCollection(new \Doctrine\Common\Collections\ArrayCollection(), $this->dm, $this->unitOfWork);
        $return->setHints($hints);
        $return->setOwner($document, $this->class->fieldMappings['restrictions']);
        $return->setInitialized(false);
        if ($mongoData) {
            $return->setMongoData($mongoData);
        }
        $this->class->reflFields['restrictions']->setValue($document, $return);
        $hydratedData['restrictions'] = $return;

        /** @Many */
        $mongoData = isset($data['priceCaches']) ? $data['priceCaches'] : null;
        $return = new \Doctrine\ODM\MongoDB\PersistentCollection(new \Doctrine\Common\Collections\ArrayCollection(), $this->dm, $this->unitOfWork);
        $return->setHints($hints);
        $return->setOwner($document, $this->class->fieldMappings['priceCaches']);
        $return->setInitialized(false);
        if ($mongoData) {
            $return->setMongoData($mongoData);
        }
        $this->class->reflFields['priceCaches']->setValue($document, $return);
        $hydratedData['priceCaches'] = $return;

        /** @Many */
        $mongoData = isset($data['roomCaches']) ? $data['roomCaches'] : null;
        $return = new \Doctrine\ODM\MongoDB\PersistentCollection(new \Doctrine\Common\Collections\ArrayCollection(), $this->dm, $this->unitOfWork);
        $return->setHints($hints);
        $return->setOwner($document, $this->class->fieldMappings['roomCaches']);
        $return->setInitialized(false);
        if ($mongoData) {
            $return->setMongoData($mongoData);
        }
        $this->class->reflFields['roomCaches']->setValue($document, $return);
        $hydratedData['roomCaches'] = $return;

        /** @ReferenceOne */
        if (isset($data['defaultPromotion'])) {
            $reference = $data['defaultPromotion'];
            if (isset($this->class->fieldMappings['defaultPromotion']['simple']) && $this->class->fieldMappings['defaultPromotion']['simple']) {
                $className = $this->class->fieldMappings['defaultPromotion']['targetDocument'];
                $mongoId = $reference;
            } else {
                $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['defaultPromotion'], $reference);
                $mongoId = $reference['$id'];
            }
            $targetMetadata = $this->dm->getClassMetadata($className);
            $id = $targetMetadata->getPHPIdentifierValue($mongoId);
            $return = $this->dm->getReference($className, $id);
            $this->class->reflFields['defaultPromotion']->setValue($document, $return);
            $hydratedData['defaultPromotion'] = $return;
        }

        /** @Many */
        $mongoData = isset($data['services']) ? $data['services'] : null;
        $return = new \Doctrine\ODM\MongoDB\PersistentCollection(new \Doctrine\Common\Collections\ArrayCollection(), $this->dm, $this->unitOfWork);
        $return->setHints($hints);
        $return->setOwner($document, $this->class->fieldMappings['services']);
        $return->setInitialized(false);
        if ($mongoData) {
            $return->setMongoData($mongoData);
        }
        $this->class->reflFields['services']->setValue($document, $return);
        $hydratedData['services'] = $return;

        /** @Many */
        $mongoData = isset($data['defaultServices']) ? $data['defaultServices'] : null;
        $return = new \Doctrine\ODM\MongoDB\PersistentCollection(new \Doctrine\Common\Collections\ArrayCollection(), $this->dm, $this->unitOfWork);
        $return->setHints($hints);
        $return->setOwner($document, $this->class->fieldMappings['defaultServices']);
        $return->setInitialized(false);
        if ($mongoData) {
            $return->setMongoData($mongoData);
        }
        $this->class->reflFields['defaultServices']->setValue($document, $return);
        $hydratedData['defaultServices'] = $return;

        /** @EmbedOne */
        if (isset($data['childOptions'])) {
            $embeddedDocument = $data['childOptions'];
            $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['childOptions'], $embeddedDocument);
            $embeddedMetadata = $this->dm->getClassMetadata($className);
            $return = $embeddedMetadata->newInstance();

            $this->unitOfWork->setParentAssociation($return, $this->class->fieldMappings['childOptions'], $document, 'childOptions');

            $embeddedData = $this->dm->getHydratorFactory()->hydrate($return, $embeddedDocument, $hints);
            $embeddedId = $embeddedMetadata->identifier && isset($embeddedData[$embeddedMetadata->identifier]) ? $embeddedData[$embeddedMetadata->identifier] : null;

            $this->unitOfWork->registerManaged($return, $embeddedId, $embeddedData);

            $this->class->reflFields['childOptions']->setValue($document, $return);
            $hydratedData['childOptions'] = $return;
        }

        /** @Many */
        $mongoData = isset($data['children']) ? $data['children'] : null;
        $return = new \Doctrine\ODM\MongoDB\PersistentCollection(new \Doctrine\Common\Collections\ArrayCollection(), $this->dm, $this->unitOfWork);
        $return->setHints($hints);
        $return->setOwner($document, $this->class->fieldMappings['children']);
        $return->setInitialized(false);
        if ($mongoData) {
            $return->setMongoData($mongoData);
        }
        $this->class->reflFields['children']->setValue($document, $return);
        $hydratedData['children'] = $return;

        /** @ReferenceOne */
        if (isset($data['parent'])) {
            $reference = $data['parent'];
            if (isset($this->class->fieldMappings['parent']['simple']) && $this->class->fieldMappings['parent']['simple']) {
                $className = $this->class->fieldMappings['parent']['targetDocument'];
                $mongoId = $reference;
            } else {
                $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['parent'], $reference);
                $mongoId = $reference['$id'];
            }
            $targetMetadata = $this->dm->getClassMetadata($className);
            $id = $targetMetadata->getPHPIdentifierValue($mongoId);
            $return = $this->dm->getReference($className, $id);
            $this->class->reflFields['parent']->setValue($document, $return);
            $hydratedData['parent'] = $return;
        }

        /** @Field(type="boolean") */
        if (isset($data['defaultForMerging'])) {
            $value = $data['defaultForMerging'];
            $return = (bool) $value;
            $this->class->reflFields['defaultForMerging']->setValue($document, $return);
            $hydratedData['defaultForMerging'] = $return;
        }

        /** @Field(type="id") */
        if (isset($data['_id'])) {
            $value = $data['_id'];
            $return = $value instanceof \MongoId ? (string) $value : $value;
            $this->class->reflFields['id']->setValue($document, $return);
            $hydratedData['id'] = $return;
        }

        /** @Field(type="boolean") */
        if (isset($data['isEnabled'])) {
            $value = $data['isEnabled'];
            $return = (bool) $value;
            $this->class->reflFields['isEnabled']->setValue($document, $return);
            $hydratedData['isEnabled'] = $return;
        }

        /** @Field(type="date") */
        if (isset($data['createdAt'])) {
            $value = $data['createdAt'];
            if ($value === null) { $return = null; } else { $return = \Doctrine\ODM\MongoDB\Types\DateType::getDateTime($value); }
            $this->class->reflFields['createdAt']->setValue($document, clone $return);
            $hydratedData['createdAt'] = $return;
        }

        /** @Field(type="date") */
        if (isset($data['updatedAt'])) {
            $value = $data['updatedAt'];
            if ($value === null) { $return = null; } else { $return = \Doctrine\ODM\MongoDB\Types\DateType::getDateTime($value); }
            $this->class->reflFields['updatedAt']->setValue($document, clone $return);
            $hydratedData['updatedAt'] = $return;
        }

        /** @Field(type="date") */
        if (isset($data['deletedAt'])) {
            $value = $data['deletedAt'];
            if ($value === null) { $return = null; } else { $return = \Doctrine\ODM\MongoDB\Types\DateType::getDateTime($value); }
            $this->class->reflFields['deletedAt']->setValue($document, clone $return);
            $hydratedData['deletedAt'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['createdBy'])) {
            $value = $data['createdBy'];
            $return = (string) $value;
            $this->class->reflFields['createdBy']->setValue($document, $return);
            $hydratedData['createdBy'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['updatedBy'])) {
            $value = $data['updatedBy'];
            $return = (string) $value;
            $this->class->reflFields['updatedBy']->setValue($document, $return);
            $hydratedData['updatedBy'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['condition'])) {
            $value = $data['condition'];
            $return = (string) $value;
            $this->class->reflFields['condition']->setValue($document, $return);
            $hydratedData['condition'] = $return;
        }

        /** @Field(type="integer") */
        if (isset($data['conditionQuantity'])) {
            $value = $data['conditionQuantity'];
            $return = (int) $value;
            $this->class->reflFields['conditionQuantity']->setValue($document, $return);
            $hydratedData['conditionQuantity'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['additionalCondition'])) {
            $value = $data['additionalCondition'];
            $return = (string) $value;
            $this->class->reflFields['additionalCondition']->setValue($document, $return);
            $hydratedData['additionalCondition'] = $return;
        }

        /** @Field(type="integer") */
        if (isset($data['additionalConditionQuantity'])) {
            $value = $data['additionalConditionQuantity'];
            $return = (int) $value;
            $this->class->reflFields['additionalConditionQuantity']->setValue($document, $return);
            $hydratedData['additionalConditionQuantity'] = $return;
        }
        return $hydratedData;
    }
}