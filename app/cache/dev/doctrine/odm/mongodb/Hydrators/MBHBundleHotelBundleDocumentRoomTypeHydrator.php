<?php

namespace Hydrators;

use Doctrine\ODM\MongoDB\DocumentManager;
use Doctrine\ODM\MongoDB\Mapping\ClassMetadata;
use Doctrine\ODM\MongoDB\Hydrator\HydratorInterface;
use Doctrine\ODM\MongoDB\UnitOfWork;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ODM. DO NOT EDIT THIS FILE.
 */
class MBHBundleHotelBundleDocumentRoomTypeHydrator implements HydratorInterface
{
    private $dm;
    private $unitOfWork;
    private $class;

    public function __construct(DocumentManager $dm, UnitOfWork $uow, ClassMetadata $class)
    {
        $this->dm = $dm;
        $this->unitOfWork = $uow;
        $this->class = $class;
    }

    public function hydrate($document, $data, array $hints = array())
    {
        $hydratedData = array();

        /** @ReferenceOne */
        if (isset($data['hotel'])) {
            $reference = $data['hotel'];
            if (isset($this->class->fieldMappings['hotel']['simple']) && $this->class->fieldMappings['hotel']['simple']) {
                $className = $this->class->fieldMappings['hotel']['targetDocument'];
                $mongoId = $reference;
            } else {
                $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['hotel'], $reference);
                $mongoId = $reference['$id'];
            }
            $targetMetadata = $this->dm->getClassMetadata($className);
            $id = $targetMetadata->getPHPIdentifierValue($mongoId);
            $return = $this->dm->getReference($className, $id);
            $this->class->reflFields['hotel']->setValue($document, $return);
            $hydratedData['hotel'] = $return;
        }

        /** @Many */
        $mongoData = isset($data['rooms']) ? $data['rooms'] : null;
        $return = new \Doctrine\ODM\MongoDB\PersistentCollection(new \Doctrine\Common\Collections\ArrayCollection(), $this->dm, $this->unitOfWork);
        $return->setHints($hints);
        $return->setOwner($document, $this->class->fieldMappings['rooms']);
        $return->setInitialized(false);
        if ($mongoData) {
            $return->setMongoData($mongoData);
        }
        $this->class->reflFields['rooms']->setValue($document, $return);
        $hydratedData['rooms'] = $return;

        /** @Field(type="string") */
        if (isset($data['fullTitle'])) {
            $value = $data['fullTitle'];
            $return = (string) $value;
            $this->class->reflFields['fullTitle']->setValue($document, $return);
            $hydratedData['fullTitle'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['title'])) {
            $value = $data['title'];
            $return = (string) $value;
            $this->class->reflFields['title']->setValue($document, $return);
            $hydratedData['title'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['description'])) {
            $value = $data['description'];
            $return = (string) $value;
            $this->class->reflFields['description']->setValue($document, $return);
            $hydratedData['description'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['color'])) {
            $value = $data['color'];
            $return = (string) $value;
            $this->class->reflFields['color']->setValue($document, $return);
            $hydratedData['color'] = $return;
        }

        /** @Field(type="integer") */
        if (isset($data['places'])) {
            $value = $data['places'];
            $return = (int) $value;
            $this->class->reflFields['places']->setValue($document, $return);
            $hydratedData['places'] = $return;
        }

        /** @Field(type="integer") */
        if (isset($data['additionalPlaces'])) {
            $value = $data['additionalPlaces'];
            $return = (int) $value;
            $this->class->reflFields['additionalPlaces']->setValue($document, $return);
            $hydratedData['additionalPlaces'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['roomSpace'])) {
            $value = $data['roomSpace'];
            $return = (string) $value;
            $this->class->reflFields['roomSpace']->setValue($document, $return);
            $hydratedData['roomSpace'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['image'])) {
            $value = $data['image'];
            $return = (string) $value;
            $this->class->reflFields['image']->setValue($document, $return);
            $hydratedData['image'] = $return;
        }

        /** @Field(type="boolean") */
        if (isset($data['isHostel'])) {
            $value = $data['isHostel'];
            $return = (bool) $value;
            $this->class->reflFields['isHostel']->setValue($document, $return);
            $hydratedData['isHostel'] = $return;
        }

        /** @Many */
        $mongoData = isset($data['images']) ? $data['images'] : null;
        $return = new \Doctrine\ODM\MongoDB\PersistentCollection(new \Doctrine\Common\Collections\ArrayCollection(), $this->dm, $this->unitOfWork);
        $return->setHints($hints);
        $return->setOwner($document, $this->class->fieldMappings['images']);
        $return->setInitialized(false);
        if ($mongoData) {
            $return->setMongoData($mongoData);
        }
        $this->class->reflFields['images']->setValue($document, $return);
        $hydratedData['images'] = $return;

        /** @EmbedOne */
        if (isset($data['taskSettings'])) {
            $embeddedDocument = $data['taskSettings'];
            $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['taskSettings'], $embeddedDocument);
            $embeddedMetadata = $this->dm->getClassMetadata($className);
            $return = $embeddedMetadata->newInstance();

            $this->unitOfWork->setParentAssociation($return, $this->class->fieldMappings['taskSettings'], $document, 'taskSettings');

            $embeddedData = $this->dm->getHydratorFactory()->hydrate($return, $embeddedDocument, $hints);
            $embeddedId = $embeddedMetadata->identifier && isset($embeddedData[$embeddedMetadata->identifier]) ? $embeddedData[$embeddedMetadata->identifier] : null;

            $this->unitOfWork->registerManaged($return, $embeddedId, $embeddedData);

            $this->class->reflFields['taskSettings']->setValue($document, $return);
            $hydratedData['taskSettings'] = $return;
        }

        /** @Field(type="collection") */
        if (isset($data['facilities'])) {
            $value = $data['facilities'];
            $return = $value;
            $this->class->reflFields['facilities']->setValue($document, $return);
            $hydratedData['facilities'] = $return;
        }

        /** @ReferenceOne */
        if (isset($data['category'])) {
            $reference = $data['category'];
            if (isset($this->class->fieldMappings['category']['simple']) && $this->class->fieldMappings['category']['simple']) {
                $className = $this->class->fieldMappings['category']['targetDocument'];
                $mongoId = $reference;
            } else {
                $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['category'], $reference);
                $mongoId = $reference['$id'];
            }
            $targetMetadata = $this->dm->getClassMetadata($className);
            $id = $targetMetadata->getPHPIdentifierValue($mongoId);
            $return = $this->dm->getReference($className, $id);
            $this->class->reflFields['category']->setValue($document, $return);
            $hydratedData['category'] = $return;
        }

        /** @Field(type="id") */
        if (isset($data['_id'])) {
            $value = $data['_id'];
            $return = $value instanceof \MongoId ? (string) $value : $value;
            $this->class->reflFields['id']->setValue($document, $return);
            $hydratedData['id'] = $return;
        }

        /** @Field(type="boolean") */
        if (isset($data['isEnabled'])) {
            $value = $data['isEnabled'];
            $return = (bool) $value;
            $this->class->reflFields['isEnabled']->setValue($document, $return);
            $hydratedData['isEnabled'] = $return;
        }

        /** @Field(type="date") */
        if (isset($data['createdAt'])) {
            $value = $data['createdAt'];
            if ($value === null) { $return = null; } else { $return = \Doctrine\ODM\MongoDB\Types\DateType::getDateTime($value); }
            $this->class->reflFields['createdAt']->setValue($document, clone $return);
            $hydratedData['createdAt'] = $return;
        }

        /** @Field(type="date") */
        if (isset($data['updatedAt'])) {
            $value = $data['updatedAt'];
            if ($value === null) { $return = null; } else { $return = \Doctrine\ODM\MongoDB\Types\DateType::getDateTime($value); }
            $this->class->reflFields['updatedAt']->setValue($document, clone $return);
            $hydratedData['updatedAt'] = $return;
        }

        /** @Field(type="date") */
        if (isset($data['deletedAt'])) {
            $value = $data['deletedAt'];
            if ($value === null) { $return = null; } else { $return = \Doctrine\ODM\MongoDB\Types\DateType::getDateTime($value); }
            $this->class->reflFields['deletedAt']->setValue($document, clone $return);
            $hydratedData['deletedAt'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['createdBy'])) {
            $value = $data['createdBy'];
            $return = (string) $value;
            $this->class->reflFields['createdBy']->setValue($document, $return);
            $hydratedData['createdBy'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['updatedBy'])) {
            $value = $data['updatedBy'];
            $return = (string) $value;
            $this->class->reflFields['updatedBy']->setValue($document, $return);
            $hydratedData['updatedBy'] = $return;
        }

        /** @Field(type="boolean") */
        if (isset($data['isChildPrices'])) {
            $value = $data['isChildPrices'];
            $return = (bool) $value;
            $this->class->reflFields['isChildPrices']->setValue($document, $return);
            $hydratedData['isChildPrices'] = $return;
        }

        /** @Field(type="boolean") */
        if (isset($data['isIndividualAdditionalPrices'])) {
            $value = $data['isIndividualAdditionalPrices'];
            $return = (bool) $value;
            $this->class->reflFields['isIndividualAdditionalPrices']->setValue($document, $return);
            $hydratedData['isIndividualAdditionalPrices'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['internationalTitle'])) {
            $value = $data['internationalTitle'];
            $return = (string) $value;
            $this->class->reflFields['internationalTitle']->setValue($document, $return);
            $hydratedData['internationalTitle'] = $return;
        }
        return $hydratedData;
    }
}