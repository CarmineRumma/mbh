<?php

namespace Hydrators;

use Doctrine\ODM\MongoDB\DocumentManager;
use Doctrine\ODM\MongoDB\Mapping\ClassMetadata;
use Doctrine\ODM\MongoDB\Hydrator\HydratorInterface;
use Doctrine\ODM\MongoDB\UnitOfWork;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ODM. DO NOT EDIT THIS FILE.
 */
class MBHBundlePackageBundleDocumentTouristHydrator implements HydratorInterface
{
    private $dm;
    private $unitOfWork;
    private $class;

    public function __construct(DocumentManager $dm, UnitOfWork $uow, ClassMetadata $class)
    {
        $this->dm = $dm;
        $this->unitOfWork = $uow;
        $this->class = $class;
    }

    public function hydrate($document, $data, array $hints = array())
    {
        $hydratedData = array();

        /** @Many */
        $mongoData = isset($data['orders']) ? $data['orders'] : null;
        $return = new \Doctrine\ODM\MongoDB\PersistentCollection(new \Doctrine\Common\Collections\ArrayCollection(), $this->dm, $this->unitOfWork);
        $return->setHints($hints);
        $return->setOwner($document, $this->class->fieldMappings['orders']);
        $return->setInitialized(false);
        if ($mongoData) {
            $return->setMongoData($mongoData);
        }
        $this->class->reflFields['orders']->setValue($document, $return);
        $hydratedData['orders'] = $return;

        /** @Many */
        $mongoData = isset($data['packages']) ? $data['packages'] : null;
        $return = new \Doctrine\ODM\MongoDB\PersistentCollection(new \Doctrine\Common\Collections\ArrayCollection(), $this->dm, $this->unitOfWork);
        $return->setHints($hints);
        $return->setOwner($document, $this->class->fieldMappings['packages']);
        $return->setInitialized(false);
        if ($mongoData) {
            $return->setMongoData($mongoData);
        }
        $this->class->reflFields['packages']->setValue($document, $return);
        $hydratedData['packages'] = $return;

        /** @Many */
        $mongoData = isset($data['cashDocuments']) ? $data['cashDocuments'] : null;
        $return = new \Doctrine\ODM\MongoDB\PersistentCollection(new \Doctrine\Common\Collections\ArrayCollection(), $this->dm, $this->unitOfWork);
        $return->setHints($hints);
        $return->setOwner($document, $this->class->fieldMappings['cashDocuments']);
        $return->setInitialized(false);
        if ($mongoData) {
            $return->setMongoData($mongoData);
        }
        $this->class->reflFields['cashDocuments']->setValue($document, $return);
        $hydratedData['cashDocuments'] = $return;

        /** @Field(type="string") */
        if (isset($data['firstName'])) {
            $value = $data['firstName'];
            $return = (string) $value;
            $this->class->reflFields['firstName']->setValue($document, $return);
            $hydratedData['firstName'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['lastName'])) {
            $value = $data['lastName'];
            $return = (string) $value;
            $this->class->reflFields['lastName']->setValue($document, $return);
            $hydratedData['lastName'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['patronymic'])) {
            $value = $data['patronymic'];
            $return = (string) $value;
            $this->class->reflFields['patronymic']->setValue($document, $return);
            $hydratedData['patronymic'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['fullName'])) {
            $value = $data['fullName'];
            $return = (string) $value;
            $this->class->reflFields['fullName']->setValue($document, $return);
            $hydratedData['fullName'] = $return;
        }

        /** @Field(type="date") */
        if (isset($data['birthday'])) {
            $value = $data['birthday'];
            if ($value === null) { $return = null; } else { $return = \Doctrine\ODM\MongoDB\Types\DateType::getDateTime($value); }
            $this->class->reflFields['birthday']->setValue($document, clone $return);
            $hydratedData['birthday'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['sex'])) {
            $value = $data['sex'];
            $return = (string) $value;
            $this->class->reflFields['sex']->setValue($document, $return);
            $hydratedData['sex'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['phone'])) {
            $value = $data['phone'];
            $return = (string) $value;
            $this->class->reflFields['phone']->setValue($document, $return);
            $hydratedData['phone'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['mobilePhone'])) {
            $value = $data['mobilePhone'];
            $return = (string) $value;
            $this->class->reflFields['mobilePhone']->setValue($document, $return);
            $hydratedData['mobilePhone'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['messenger'])) {
            $value = $data['messenger'];
            $return = (string) $value;
            $this->class->reflFields['messenger']->setValue($document, $return);
            $hydratedData['messenger'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['email'])) {
            $value = $data['email'];
            $return = (string) $value;
            $this->class->reflFields['email']->setValue($document, $return);
            $hydratedData['email'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['note'])) {
            $value = $data['note'];
            $return = (string) $value;
            $this->class->reflFields['note']->setValue($document, $return);
            $hydratedData['note'] = $return;
        }

        /** @ReferenceOne */
        if (isset($data['citizenship'])) {
            $reference = $data['citizenship'];
            if (isset($this->class->fieldMappings['citizenship']['simple']) && $this->class->fieldMappings['citizenship']['simple']) {
                $className = $this->class->fieldMappings['citizenship']['targetDocument'];
                $mongoId = $reference;
            } else {
                $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['citizenship'], $reference);
                $mongoId = $reference['$id'];
            }
            $targetMetadata = $this->dm->getClassMetadata($className);
            $id = $targetMetadata->getPHPIdentifierValue($mongoId);
            $return = $this->dm->getReference($className, $id);
            $this->class->reflFields['citizenship']->setValue($document, $return);
            $hydratedData['citizenship'] = $return;
        }

        /** @EmbedOne */
        if (isset($data['birthplace'])) {
            $embeddedDocument = $data['birthplace'];
            $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['birthplace'], $embeddedDocument);
            $embeddedMetadata = $this->dm->getClassMetadata($className);
            $return = $embeddedMetadata->newInstance();

            $this->unitOfWork->setParentAssociation($return, $this->class->fieldMappings['birthplace'], $document, 'birthplace');

            $embeddedData = $this->dm->getHydratorFactory()->hydrate($return, $embeddedDocument, $hints);
            $embeddedId = $embeddedMetadata->identifier && isset($embeddedData[$embeddedMetadata->identifier]) ? $embeddedData[$embeddedMetadata->identifier] : null;

            $this->unitOfWork->registerManaged($return, $embeddedId, $embeddedData);

            $this->class->reflFields['birthplace']->setValue($document, $return);
            $hydratedData['birthplace'] = $return;
        }

        /** @EmbedOne */
        if (isset($data['addressObjectDecomposed'])) {
            $embeddedDocument = $data['addressObjectDecomposed'];
            $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['addressObjectDecomposed'], $embeddedDocument);
            $embeddedMetadata = $this->dm->getClassMetadata($className);
            $return = $embeddedMetadata->newInstance();

            $this->unitOfWork->setParentAssociation($return, $this->class->fieldMappings['addressObjectDecomposed'], $document, 'addressObjectDecomposed');

            $embeddedData = $this->dm->getHydratorFactory()->hydrate($return, $embeddedDocument, $hints);
            $embeddedId = $embeddedMetadata->identifier && isset($embeddedData[$embeddedMetadata->identifier]) ? $embeddedData[$embeddedMetadata->identifier] : null;

            $this->unitOfWork->registerManaged($return, $embeddedId, $embeddedData);

            $this->class->reflFields['addressObjectDecomposed']->setValue($document, $return);
            $hydratedData['addressObjectDecomposed'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['addressObjectCombined'])) {
            $value = $data['addressObjectCombined'];
            $return = (string) $value;
            $this->class->reflFields['addressObjectCombined']->setValue($document, $return);
            $hydratedData['addressObjectCombined'] = $return;
        }

        /** @EmbedOne */
        if (isset($data['documentRelation'])) {
            $embeddedDocument = $data['documentRelation'];
            $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['documentRelation'], $embeddedDocument);
            $embeddedMetadata = $this->dm->getClassMetadata($className);
            $return = $embeddedMetadata->newInstance();

            $this->unitOfWork->setParentAssociation($return, $this->class->fieldMappings['documentRelation'], $document, 'documentRelation');

            $embeddedData = $this->dm->getHydratorFactory()->hydrate($return, $embeddedDocument, $hints);
            $embeddedId = $embeddedMetadata->identifier && isset($embeddedData[$embeddedMetadata->identifier]) ? $embeddedData[$embeddedMetadata->identifier] : null;

            $this->unitOfWork->registerManaged($return, $embeddedId, $embeddedData);

            $this->class->reflFields['documentRelation']->setValue($document, $return);
            $hydratedData['documentRelation'] = $return;
        }

        /** @EmbedOne */
        if (isset($data['migration'])) {
            $embeddedDocument = $data['migration'];
            $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['migration'], $embeddedDocument);
            $embeddedMetadata = $this->dm->getClassMetadata($className);
            $return = $embeddedMetadata->newInstance();

            $this->unitOfWork->setParentAssociation($return, $this->class->fieldMappings['migration'], $document, 'migration');

            $embeddedData = $this->dm->getHydratorFactory()->hydrate($return, $embeddedDocument, $hints);
            $embeddedId = $embeddedMetadata->identifier && isset($embeddedData[$embeddedMetadata->identifier]) ? $embeddedData[$embeddedMetadata->identifier] : null;

            $this->unitOfWork->registerManaged($return, $embeddedId, $embeddedData);

            $this->class->reflFields['migration']->setValue($document, $return);
            $hydratedData['migration'] = $return;
        }

        /** @EmbedOne */
        if (isset($data['visa'])) {
            $embeddedDocument = $data['visa'];
            $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['visa'], $embeddedDocument);
            $embeddedMetadata = $this->dm->getClassMetadata($className);
            $return = $embeddedMetadata->newInstance();

            $this->unitOfWork->setParentAssociation($return, $this->class->fieldMappings['visa'], $document, 'visa');

            $embeddedData = $this->dm->getHydratorFactory()->hydrate($return, $embeddedDocument, $hints);
            $embeddedId = $embeddedMetadata->identifier && isset($embeddedData[$embeddedMetadata->identifier]) ? $embeddedData[$embeddedMetadata->identifier] : null;

            $this->unitOfWork->registerManaged($return, $embeddedId, $embeddedData);

            $this->class->reflFields['visa']->setValue($document, $return);
            $hydratedData['visa'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['communicationLanguage'])) {
            $value = $data['communicationLanguage'];
            $return = (string) $value;
            $this->class->reflFields['communicationLanguage']->setValue($document, $return);
            $hydratedData['communicationLanguage'] = $return;
        }

        /** @Field(type="boolean") */
        if (isset($data['isUnwelcome'])) {
            $value = $data['isUnwelcome'];
            $return = (bool) $value;
            $this->class->reflFields['isUnwelcome']->setValue($document, $return);
            $hydratedData['isUnwelcome'] = $return;
        }

        /** @Field(type="id") */
        if (isset($data['_id'])) {
            $value = $data['_id'];
            $return = $value instanceof \MongoId ? (string) $value : $value;
            $this->class->reflFields['id']->setValue($document, $return);
            $hydratedData['id'] = $return;
        }

        /** @Field(type="boolean") */
        if (isset($data['isEnabled'])) {
            $value = $data['isEnabled'];
            $return = (bool) $value;
            $this->class->reflFields['isEnabled']->setValue($document, $return);
            $hydratedData['isEnabled'] = $return;
        }

        /** @Field(type="date") */
        if (isset($data['createdAt'])) {
            $value = $data['createdAt'];
            if ($value === null) { $return = null; } else { $return = \Doctrine\ODM\MongoDB\Types\DateType::getDateTime($value); }
            $this->class->reflFields['createdAt']->setValue($document, clone $return);
            $hydratedData['createdAt'] = $return;
        }

        /** @Field(type="date") */
        if (isset($data['updatedAt'])) {
            $value = $data['updatedAt'];
            if ($value === null) { $return = null; } else { $return = \Doctrine\ODM\MongoDB\Types\DateType::getDateTime($value); }
            $this->class->reflFields['updatedAt']->setValue($document, clone $return);
            $hydratedData['updatedAt'] = $return;
        }

        /** @Field(type="date") */
        if (isset($data['deletedAt'])) {
            $value = $data['deletedAt'];
            if ($value === null) { $return = null; } else { $return = \Doctrine\ODM\MongoDB\Types\DateType::getDateTime($value); }
            $this->class->reflFields['deletedAt']->setValue($document, clone $return);
            $hydratedData['deletedAt'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['createdBy'])) {
            $value = $data['createdBy'];
            $return = (string) $value;
            $this->class->reflFields['createdBy']->setValue($document, $return);
            $hydratedData['createdBy'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['updatedBy'])) {
            $value = $data['updatedBy'];
            $return = (string) $value;
            $this->class->reflFields['updatedBy']->setValue($document, $return);
            $hydratedData['updatedBy'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['inn'])) {
            $value = $data['inn'];
            $return = (string) $value;
            $this->class->reflFields['inn']->setValue($document, $return);
            $hydratedData['inn'] = $return;
        }
        return $hydratedData;
    }
}