<?php

namespace Hydrators;

use Doctrine\ODM\MongoDB\DocumentManager;
use Doctrine\ODM\MongoDB\Mapping\ClassMetadata;
use Doctrine\ODM\MongoDB\Hydrator\HydratorInterface;
use Doctrine\ODM\MongoDB\UnitOfWork;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ODM. DO NOT EDIT THIS FILE.
 */
class MBHBundlePackageBundleDocumentVisaHydrator implements HydratorInterface
{
    private $dm;
    private $unitOfWork;
    private $class;

    public function __construct(DocumentManager $dm, UnitOfWork $uow, ClassMetadata $class)
    {
        $this->dm = $dm;
        $this->unitOfWork = $uow;
        $this->class = $class;
    }

    public function hydrate($document, $data, array $hints = array())
    {
        $hydratedData = array();

        /** @Field(type="string") */
        if (isset($data['type'])) {
            $value = $data['type'];
            $return = (string) $value;
            $this->class->reflFields['type']->setValue($document, $return);
            $hydratedData['type'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['series'])) {
            $value = $data['series'];
            $return = (string) $value;
            $this->class->reflFields['series']->setValue($document, $return);
            $hydratedData['series'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['number'])) {
            $value = $data['number'];
            $return = (string) $value;
            $this->class->reflFields['number']->setValue($document, $return);
            $hydratedData['number'] = $return;
        }

        /** @Field(type="date") */
        if (isset($data['issued'])) {
            $value = $data['issued'];
            if ($value === null) { $return = null; } else { $return = \Doctrine\ODM\MongoDB\Types\DateType::getDateTime($value); }
            $this->class->reflFields['issued']->setValue($document, clone $return);
            $hydratedData['issued'] = $return;
        }

        /** @Field(type="date") */
        if (isset($data['expiry'])) {
            $value = $data['expiry'];
            if ($value === null) { $return = null; } else { $return = \Doctrine\ODM\MongoDB\Types\DateType::getDateTime($value); }
            $this->class->reflFields['expiry']->setValue($document, clone $return);
            $hydratedData['expiry'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['profession'])) {
            $value = $data['profession'];
            $return = (string) $value;
            $this->class->reflFields['profession']->setValue($document, $return);
            $hydratedData['profession'] = $return;
        }

        /** @Field(type="date") */
        if (isset($data['arrivalTime'])) {
            $value = $data['arrivalTime'];
            if ($value === null) { $return = null; } else { $return = \Doctrine\ODM\MongoDB\Types\DateType::getDateTime($value); }
            $this->class->reflFields['arrivalTime']->setValue($document, clone $return);
            $hydratedData['arrivalTime'] = $return;
        }

        /** @Field(type="date") */
        if (isset($data['departureTime'])) {
            $value = $data['departureTime'];
            if ($value === null) { $return = null; } else { $return = \Doctrine\ODM\MongoDB\Types\DateType::getDateTime($value); }
            $this->class->reflFields['departureTime']->setValue($document, clone $return);
            $hydratedData['departureTime'] = $return;
        }

        /** @Field(type="id") */
        if (isset($data['_id'])) {
            $value = $data['_id'];
            $return = $value instanceof \MongoId ? (string) $value : $value;
            $this->class->reflFields['id']->setValue($document, $return);
            $hydratedData['id'] = $return;
        }

        /** @Field(type="boolean") */
        if (isset($data['isEnabled'])) {
            $value = $data['isEnabled'];
            $return = (bool) $value;
            $this->class->reflFields['isEnabled']->setValue($document, $return);
            $hydratedData['isEnabled'] = $return;
        }
        return $hydratedData;
    }
}