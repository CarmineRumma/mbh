<?php

namespace Hydrators;

use Doctrine\ODM\MongoDB\DocumentManager;
use Doctrine\ODM\MongoDB\Mapping\ClassMetadata;
use Doctrine\ODM\MongoDB\Hydrator\HydratorInterface;
use Doctrine\ODM\MongoDB\UnitOfWork;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ODM. DO NOT EDIT THIS FILE.
 */
class MBHBundleHotelBundleDocumentHotelHydrator implements HydratorInterface
{
    private $dm;
    private $unitOfWork;
    private $class;

    public function __construct(DocumentManager $dm, UnitOfWork $uow, ClassMetadata $class)
    {
        $this->dm = $dm;
        $this->unitOfWork = $uow;
        $this->class = $class;
    }

    public function hydrate($document, $data, array $hints = array())
    {
        $hydratedData = array();

        /** @Field(type="string") */
        if (isset($data['fullTitle'])) {
            $value = $data['fullTitle'];
            $return = (string) $value;
            $this->class->reflFields['fullTitle']->setValue($document, $return);
            $hydratedData['fullTitle'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['title'])) {
            $value = $data['title'];
            $return = (string) $value;
            $this->class->reflFields['title']->setValue($document, $return);
            $hydratedData['title'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['prefix'])) {
            $value = $data['prefix'];
            $return = (string) $value;
            $this->class->reflFields['prefix']->setValue($document, $return);
            $hydratedData['prefix'] = $return;
        }

        /** @Field(type="boolean") */
        if (isset($data['isHostel'])) {
            $value = $data['isHostel'];
            $return = (bool) $value;
            $this->class->reflFields['isHostel']->setValue($document, $return);
            $hydratedData['isHostel'] = $return;
        }

        /** @Field(type="boolean") */
        if (isset($data['isDefault'])) {
            $value = $data['isDefault'];
            $return = (bool) $value;
            $this->class->reflFields['isDefault']->setValue($document, $return);
            $hydratedData['isDefault'] = $return;
        }

        /** @Field(type="float") */
        if (isset($data['latitude'])) {
            $value = $data['latitude'];
            $return = (float) $value;
            $this->class->reflFields['latitude']->setValue($document, $return);
            $hydratedData['latitude'] = $return;
        }

        /** @Field(type="float") */
        if (isset($data['longitude'])) {
            $value = $data['longitude'];
            $return = (float) $value;
            $this->class->reflFields['longitude']->setValue($document, $return);
            $hydratedData['longitude'] = $return;
        }

        /** @Field(type="collection") */
        if (isset($data['type'])) {
            $value = $data['type'];
            $return = $value;
            $this->class->reflFields['type']->setValue($document, $return);
            $hydratedData['type'] = $return;
        }

        /** @Field(type="collection") */
        if (isset($data['theme'])) {
            $value = $data['theme'];
            $return = $value;
            $this->class->reflFields['theme']->setValue($document, $return);
            $hydratedData['theme'] = $return;
        }

        /** @Field(type="collection") */
        if (isset($data['facilities'])) {
            $value = $data['facilities'];
            $return = $value;
            $this->class->reflFields['facilities']->setValue($document, $return);
            $hydratedData['facilities'] = $return;
        }

        /** @Field(type="integer") */
        if (isset($data['rating'])) {
            $value = $data['rating'];
            $return = (int) $value;
            $this->class->reflFields['rating']->setValue($document, $return);
            $hydratedData['rating'] = $return;
        }

        /** @Many */
        $mongoData = isset($data['roomTypes']) ? $data['roomTypes'] : null;
        $return = new \Doctrine\ODM\MongoDB\PersistentCollection(new \Doctrine\Common\Collections\ArrayCollection(), $this->dm, $this->unitOfWork);
        $return->setHints($hints);
        $return->setOwner($document, $this->class->fieldMappings['roomTypes']);
        $return->setInitialized(false);
        if ($mongoData) {
            $return->setMongoData($mongoData);
        }
        $this->class->reflFields['roomTypes']->setValue($document, $return);
        $hydratedData['roomTypes'] = $return;

        /** @Many */
        $mongoData = isset($data['roomTypesCategories']) ? $data['roomTypesCategories'] : null;
        $return = new \Doctrine\ODM\MongoDB\PersistentCollection(new \Doctrine\Common\Collections\ArrayCollection(), $this->dm, $this->unitOfWork);
        $return->setHints($hints);
        $return->setOwner($document, $this->class->fieldMappings['roomTypesCategories']);
        $return->setInitialized(false);
        if ($mongoData) {
            $return->setMongoData($mongoData);
        }
        $this->class->reflFields['roomTypesCategories']->setValue($document, $return);
        $hydratedData['roomTypesCategories'] = $return;

        /** @Many */
        $mongoData = isset($data['rooms']) ? $data['rooms'] : null;
        $return = new \Doctrine\ODM\MongoDB\PersistentCollection(new \Doctrine\Common\Collections\ArrayCollection(), $this->dm, $this->unitOfWork);
        $return->setHints($hints);
        $return->setOwner($document, $this->class->fieldMappings['rooms']);
        $return->setInitialized(false);
        if ($mongoData) {
            $return->setMongoData($mongoData);
        }
        $this->class->reflFields['rooms']->setValue($document, $return);
        $hydratedData['rooms'] = $return;

        /** @Many */
        $mongoData = isset($data['tariffs']) ? $data['tariffs'] : null;
        $return = new \Doctrine\ODM\MongoDB\PersistentCollection(new \Doctrine\Common\Collections\ArrayCollection(), $this->dm, $this->unitOfWork);
        $return->setHints($hints);
        $return->setOwner($document, $this->class->fieldMappings['tariffs']);
        $return->setInitialized(false);
        if ($mongoData) {
            $return->setMongoData($mongoData);
        }
        $this->class->reflFields['tariffs']->setValue($document, $return);
        $hydratedData['tariffs'] = $return;

        /** @Many */
        $mongoData = isset($data['servicesCategories']) ? $data['servicesCategories'] : null;
        $return = new \Doctrine\ODM\MongoDB\PersistentCollection(new \Doctrine\Common\Collections\ArrayCollection(), $this->dm, $this->unitOfWork);
        $return->setHints($hints);
        $return->setOwner($document, $this->class->fieldMappings['servicesCategories']);
        $return->setInitialized(false);
        if ($mongoData) {
            $return->setMongoData($mongoData);
        }
        $this->class->reflFields['servicesCategories']->setValue($document, $return);
        $hydratedData['servicesCategories'] = $return;

        $mapping = $this->class->fieldMappings['vashotelConfig'];
        $className = $mapping['targetDocument'];
        $targetClass = $this->dm->getClassMetadata($mapping['targetDocument']);
        $mappedByMapping = $targetClass->fieldMappings[$mapping['mappedBy']];
        $mappedByFieldName = isset($mappedByMapping['simple']) && $mappedByMapping['simple'] ? $mapping['mappedBy'] : $mapping['mappedBy'].'.$id';
        $criteria = array_merge(
            array($mappedByFieldName => $data['_id']),
            isset($this->class->fieldMappings['vashotelConfig']['criteria']) ? $this->class->fieldMappings['vashotelConfig']['criteria'] : array()
        );
        $sort = isset($this->class->fieldMappings['vashotelConfig']['sort']) ? $this->class->fieldMappings['vashotelConfig']['sort'] : array();
        $return = $this->unitOfWork->getDocumentPersister($className)->load($criteria, null, array(), 0, $sort);
        $this->class->reflFields['vashotelConfig']->setValue($document, $return);
        $hydratedData['vashotelConfig'] = $return;

        $mapping = $this->class->fieldMappings['oktogoConfig'];
        $className = $mapping['targetDocument'];
        $targetClass = $this->dm->getClassMetadata($mapping['targetDocument']);
        $mappedByMapping = $targetClass->fieldMappings[$mapping['mappedBy']];
        $mappedByFieldName = isset($mappedByMapping['simple']) && $mappedByMapping['simple'] ? $mapping['mappedBy'] : $mapping['mappedBy'].'.$id';
        $criteria = array_merge(
            array($mappedByFieldName => $data['_id']),
            isset($this->class->fieldMappings['oktogoConfig']['criteria']) ? $this->class->fieldMappings['oktogoConfig']['criteria'] : array()
        );
        $sort = isset($this->class->fieldMappings['oktogoConfig']['sort']) ? $this->class->fieldMappings['oktogoConfig']['sort'] : array();
        $return = $this->unitOfWork->getDocumentPersister($className)->load($criteria, null, array(), 0, $sort);
        $this->class->reflFields['oktogoConfig']->setValue($document, $return);
        $hydratedData['oktogoConfig'] = $return;

        $mapping = $this->class->fieldMappings['bookingConfig'];
        $className = $mapping['targetDocument'];
        $targetClass = $this->dm->getClassMetadata($mapping['targetDocument']);
        $mappedByMapping = $targetClass->fieldMappings[$mapping['mappedBy']];
        $mappedByFieldName = isset($mappedByMapping['simple']) && $mappedByMapping['simple'] ? $mapping['mappedBy'] : $mapping['mappedBy'].'.$id';
        $criteria = array_merge(
            array($mappedByFieldName => $data['_id']),
            isset($this->class->fieldMappings['bookingConfig']['criteria']) ? $this->class->fieldMappings['bookingConfig']['criteria'] : array()
        );
        $sort = isset($this->class->fieldMappings['bookingConfig']['sort']) ? $this->class->fieldMappings['bookingConfig']['sort'] : array();
        $return = $this->unitOfWork->getDocumentPersister($className)->load($criteria, null, array(), 0, $sort);
        $this->class->reflFields['bookingConfig']->setValue($document, $return);
        $hydratedData['bookingConfig'] = $return;

        $mapping = $this->class->fieldMappings['hotelinnConfig'];
        $className = $mapping['targetDocument'];
        $targetClass = $this->dm->getClassMetadata($mapping['targetDocument']);
        $mappedByMapping = $targetClass->fieldMappings[$mapping['mappedBy']];
        $mappedByFieldName = isset($mappedByMapping['simple']) && $mappedByMapping['simple'] ? $mapping['mappedBy'] : $mapping['mappedBy'].'.$id';
        $criteria = array_merge(
            array($mappedByFieldName => $data['_id']),
            isset($this->class->fieldMappings['hotelinnConfig']['criteria']) ? $this->class->fieldMappings['hotelinnConfig']['criteria'] : array()
        );
        $sort = isset($this->class->fieldMappings['hotelinnConfig']['sort']) ? $this->class->fieldMappings['hotelinnConfig']['sort'] : array();
        $return = $this->unitOfWork->getDocumentPersister($className)->load($criteria, null, array(), 0, $sort);
        $this->class->reflFields['hotelinnConfig']->setValue($document, $return);
        $hydratedData['hotelinnConfig'] = $return;

        $mapping = $this->class->fieldMappings['ostrovokConfig'];
        $className = $mapping['targetDocument'];
        $targetClass = $this->dm->getClassMetadata($mapping['targetDocument']);
        $mappedByMapping = $targetClass->fieldMappings[$mapping['mappedBy']];
        $mappedByFieldName = isset($mappedByMapping['simple']) && $mappedByMapping['simple'] ? $mapping['mappedBy'] : $mapping['mappedBy'].'.$id';
        $criteria = array_merge(
            array($mappedByFieldName => $data['_id']),
            isset($this->class->fieldMappings['ostrovokConfig']['criteria']) ? $this->class->fieldMappings['ostrovokConfig']['criteria'] : array()
        );
        $sort = isset($this->class->fieldMappings['ostrovokConfig']['sort']) ? $this->class->fieldMappings['ostrovokConfig']['sort'] : array();
        $return = $this->unitOfWork->getDocumentPersister($className)->load($criteria, null, array(), 0, $sort);
        $this->class->reflFields['ostrovokConfig']->setValue($document, $return);
        $hydratedData['ostrovokConfig'] = $return;

        $mapping = $this->class->fieldMappings['myallocatorConfig'];
        $className = $mapping['targetDocument'];
        $targetClass = $this->dm->getClassMetadata($mapping['targetDocument']);
        $mappedByMapping = $targetClass->fieldMappings[$mapping['mappedBy']];
        $mappedByFieldName = isset($mappedByMapping['simple']) && $mappedByMapping['simple'] ? $mapping['mappedBy'] : $mapping['mappedBy'].'.$id';
        $criteria = array_merge(
            array($mappedByFieldName => $data['_id']),
            isset($this->class->fieldMappings['myallocatorConfig']['criteria']) ? $this->class->fieldMappings['myallocatorConfig']['criteria'] : array()
        );
        $sort = isset($this->class->fieldMappings['myallocatorConfig']['sort']) ? $this->class->fieldMappings['myallocatorConfig']['sort'] : array();
        $return = $this->unitOfWork->getDocumentPersister($className)->load($criteria, null, array(), 0, $sort);
        $this->class->reflFields['myallocatorConfig']->setValue($document, $return);
        $hydratedData['myallocatorConfig'] = $return;

        /** @Many */
        $mongoData = isset($data['ingredientCategories']) ? $data['ingredientCategories'] : null;
        $return = new \Doctrine\ODM\MongoDB\PersistentCollection(new \Doctrine\Common\Collections\ArrayCollection(), $this->dm, $this->unitOfWork);
        $return->setHints($hints);
        $return->setOwner($document, $this->class->fieldMappings['ingredientCategories']);
        $return->setInitialized(false);
        if ($mongoData) {
            $return->setMongoData($mongoData);
        }
        $this->class->reflFields['ingredientCategories']->setValue($document, $return);
        $hydratedData['ingredientCategories'] = $return;

        /** @Many */
        $mongoData = isset($data['dishMenuCategories']) ? $data['dishMenuCategories'] : null;
        $return = new \Doctrine\ODM\MongoDB\PersistentCollection(new \Doctrine\Common\Collections\ArrayCollection(), $this->dm, $this->unitOfWork);
        $return->setHints($hints);
        $return->setOwner($document, $this->class->fieldMappings['dishMenuCategories']);
        $return->setInitialized(false);
        if ($mongoData) {
            $return->setMongoData($mongoData);
        }
        $this->class->reflFields['dishMenuCategories']->setValue($document, $return);
        $hydratedData['dishMenuCategories'] = $return;

        /** @ReferenceOne */
        if (isset($data['country'])) {
            $reference = $data['country'];
            if (isset($this->class->fieldMappings['country']['simple']) && $this->class->fieldMappings['country']['simple']) {
                $className = $this->class->fieldMappings['country']['targetDocument'];
                $mongoId = $reference;
            } else {
                $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['country'], $reference);
                $mongoId = $reference['$id'];
            }
            $targetMetadata = $this->dm->getClassMetadata($className);
            $id = $targetMetadata->getPHPIdentifierValue($mongoId);
            $return = $this->dm->getReference($className, $id);
            $this->class->reflFields['country']->setValue($document, $return);
            $hydratedData['country'] = $return;
        }

        /** @ReferenceOne */
        if (isset($data['region'])) {
            $reference = $data['region'];
            if (isset($this->class->fieldMappings['region']['simple']) && $this->class->fieldMappings['region']['simple']) {
                $className = $this->class->fieldMappings['region']['targetDocument'];
                $mongoId = $reference;
            } else {
                $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['region'], $reference);
                $mongoId = $reference['$id'];
            }
            $targetMetadata = $this->dm->getClassMetadata($className);
            $id = $targetMetadata->getPHPIdentifierValue($mongoId);
            $return = $this->dm->getReference($className, $id);
            $this->class->reflFields['region']->setValue($document, $return);
            $hydratedData['region'] = $return;
        }

        /** @ReferenceOne */
        if (isset($data['city'])) {
            $reference = $data['city'];
            if (isset($this->class->fieldMappings['city']['simple']) && $this->class->fieldMappings['city']['simple']) {
                $className = $this->class->fieldMappings['city']['targetDocument'];
                $mongoId = $reference;
            } else {
                $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['city'], $reference);
                $mongoId = $reference['$id'];
            }
            $targetMetadata = $this->dm->getClassMetadata($className);
            $id = $targetMetadata->getPHPIdentifierValue($mongoId);
            $return = $this->dm->getReference($className, $id);
            $this->class->reflFields['city']->setValue($document, $return);
            $hydratedData['city'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['settlement'])) {
            $value = $data['settlement'];
            $return = (string) $value;
            $this->class->reflFields['settlement']->setValue($document, $return);
            $hydratedData['settlement'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['street'])) {
            $value = $data['street'];
            $return = (string) $value;
            $this->class->reflFields['street']->setValue($document, $return);
            $hydratedData['street'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['house'])) {
            $value = $data['house'];
            $return = (string) $value;
            $this->class->reflFields['house']->setValue($document, $return);
            $hydratedData['house'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['corpus'])) {
            $value = $data['corpus'];
            $return = (string) $value;
            $this->class->reflFields['corpus']->setValue($document, $return);
            $hydratedData['corpus'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['flat'])) {
            $value = $data['flat'];
            $return = (string) $value;
            $this->class->reflFields['flat']->setValue($document, $return);
            $hydratedData['flat'] = $return;
        }

        /** @Many */
        $mongoData = isset($data['housings']) ? $data['housings'] : null;
        $return = new \Doctrine\ODM\MongoDB\PersistentCollection(new \Doctrine\Common\Collections\ArrayCollection(), $this->dm, $this->unitOfWork);
        $return->setHints($hints);
        $return->setOwner($document, $this->class->fieldMappings['housings']);
        $return->setInitialized(false);
        if ($mongoData) {
            $return->setMongoData($mongoData);
        }
        $this->class->reflFields['housings']->setValue($document, $return);
        $hydratedData['housings'] = $return;

        /** @Field(type="string") */
        if (isset($data['logo'])) {
            $value = $data['logo'];
            $return = (string) $value;
            $this->class->reflFields['logo']->setValue($document, $return);
            $hydratedData['logo'] = $return;
        }

        $mapping = $this->class->fieldMappings['organization'];
        $className = $mapping['targetDocument'];
        $targetClass = $this->dm->getClassMetadata($mapping['targetDocument']);
        $mappedByMapping = $targetClass->fieldMappings[$mapping['mappedBy']];
        $mappedByFieldName = isset($mappedByMapping['simple']) && $mappedByMapping['simple'] ? $mapping['mappedBy'] : $mapping['mappedBy'].'.$id';
        $criteria = array_merge(
            array($mappedByFieldName => $data['_id']),
            isset($this->class->fieldMappings['organization']['criteria']) ? $this->class->fieldMappings['organization']['criteria'] : array()
        );
        $sort = isset($this->class->fieldMappings['organization']['sort']) ? $this->class->fieldMappings['organization']['sort'] : array();
        $return = $this->unitOfWork->getDocumentPersister($className)->load($criteria, null, array(), 0, $sort);
        $this->class->reflFields['organization']->setValue($document, $return);
        $hydratedData['organization'] = $return;

        /** @Field(type="integer") */
        if (isset($data['vegaAddressId'])) {
            $value = $data['vegaAddressId'];
            $return = (int) $value;
            $this->class->reflFields['vegaAddressId']->setValue($document, $return);
            $hydratedData['vegaAddressId'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['description'])) {
            $value = $data['description'];
            $return = (string) $value;
            $this->class->reflFields['description']->setValue($document, $return);
            $hydratedData['description'] = $return;
        }

        /** @Field(type="id") */
        if (isset($data['_id'])) {
            $value = $data['_id'];
            $return = $value instanceof \MongoId ? (string) $value : $value;
            $this->class->reflFields['id']->setValue($document, $return);
            $hydratedData['id'] = $return;
        }

        /** @Field(type="boolean") */
        if (isset($data['isEnabled'])) {
            $value = $data['isEnabled'];
            $return = (bool) $value;
            $this->class->reflFields['isEnabled']->setValue($document, $return);
            $hydratedData['isEnabled'] = $return;
        }

        /** @Field(type="date") */
        if (isset($data['createdAt'])) {
            $value = $data['createdAt'];
            if ($value === null) { $return = null; } else { $return = \Doctrine\ODM\MongoDB\Types\DateType::getDateTime($value); }
            $this->class->reflFields['createdAt']->setValue($document, clone $return);
            $hydratedData['createdAt'] = $return;
        }

        /** @Field(type="date") */
        if (isset($data['updatedAt'])) {
            $value = $data['updatedAt'];
            if ($value === null) { $return = null; } else { $return = \Doctrine\ODM\MongoDB\Types\DateType::getDateTime($value); }
            $this->class->reflFields['updatedAt']->setValue($document, clone $return);
            $hydratedData['updatedAt'] = $return;
        }

        /** @Field(type="date") */
        if (isset($data['deletedAt'])) {
            $value = $data['deletedAt'];
            if ($value === null) { $return = null; } else { $return = \Doctrine\ODM\MongoDB\Types\DateType::getDateTime($value); }
            $this->class->reflFields['deletedAt']->setValue($document, clone $return);
            $hydratedData['deletedAt'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['createdBy'])) {
            $value = $data['createdBy'];
            $return = (string) $value;
            $this->class->reflFields['createdBy']->setValue($document, $return);
            $hydratedData['createdBy'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['updatedBy'])) {
            $value = $data['updatedBy'];
            $return = (string) $value;
            $this->class->reflFields['updatedBy']->setValue($document, $return);
            $hydratedData['updatedBy'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['internationalTitle'])) {
            $value = $data['internationalTitle'];
            $return = (string) $value;
            $this->class->reflFields['internationalTitle']->setValue($document, $return);
            $hydratedData['internationalTitle'] = $return;
        }
        return $hydratedData;
    }
}