<?php

namespace Hydrators;

use Doctrine\ODM\MongoDB\DocumentManager;
use Doctrine\ODM\MongoDB\Mapping\ClassMetadata;
use Doctrine\ODM\MongoDB\Hydrator\HydratorInterface;
use Doctrine\ODM\MongoDB\UnitOfWork;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ODM. DO NOT EDIT THIS FILE.
 */
class MBHBundlePriceBundleDocumentRoomCacheHydrator implements HydratorInterface
{
    private $dm;
    private $unitOfWork;
    private $class;

    public function __construct(DocumentManager $dm, UnitOfWork $uow, ClassMetadata $class)
    {
        $this->dm = $dm;
        $this->unitOfWork = $uow;
        $this->class = $class;
    }

    public function hydrate($document, $data, array $hints = array())
    {
        $hydratedData = array();

        /** @ReferenceOne */
        if (isset($data['hotel'])) {
            $reference = $data['hotel'];
            if (isset($this->class->fieldMappings['hotel']['simple']) && $this->class->fieldMappings['hotel']['simple']) {
                $className = $this->class->fieldMappings['hotel']['targetDocument'];
                $mongoId = $reference;
            } else {
                $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['hotel'], $reference);
                $mongoId = $reference['$id'];
            }
            $targetMetadata = $this->dm->getClassMetadata($className);
            $id = $targetMetadata->getPHPIdentifierValue($mongoId);
            $return = $this->dm->getReference($className, $id);
            $this->class->reflFields['hotel']->setValue($document, $return);
            $hydratedData['hotel'] = $return;
        }

        /** @ReferenceOne */
        if (isset($data['roomType'])) {
            $reference = $data['roomType'];
            if (isset($this->class->fieldMappings['roomType']['simple']) && $this->class->fieldMappings['roomType']['simple']) {
                $className = $this->class->fieldMappings['roomType']['targetDocument'];
                $mongoId = $reference;
            } else {
                $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['roomType'], $reference);
                $mongoId = $reference['$id'];
            }
            $targetMetadata = $this->dm->getClassMetadata($className);
            $id = $targetMetadata->getPHPIdentifierValue($mongoId);
            $return = $this->dm->getReference($className, $id);
            $this->class->reflFields['roomType']->setValue($document, $return);
            $hydratedData['roomType'] = $return;
        }

        /** @ReferenceOne */
        if (isset($data['tariff'])) {
            $reference = $data['tariff'];
            if (isset($this->class->fieldMappings['tariff']['simple']) && $this->class->fieldMappings['tariff']['simple']) {
                $className = $this->class->fieldMappings['tariff']['targetDocument'];
                $mongoId = $reference;
            } else {
                $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['tariff'], $reference);
                $mongoId = $reference['$id'];
            }
            $targetMetadata = $this->dm->getClassMetadata($className);
            $id = $targetMetadata->getPHPIdentifierValue($mongoId);
            $return = $this->dm->getReference($className, $id);
            $this->class->reflFields['tariff']->setValue($document, $return);
            $hydratedData['tariff'] = $return;
        }

        /** @Field(type="date") */
        if (isset($data['date'])) {
            $value = $data['date'];
            if ($value === null) { $return = null; } else { $return = \Doctrine\ODM\MongoDB\Types\DateType::getDateTime($value); }
            $this->class->reflFields['date']->setValue($document, clone $return);
            $hydratedData['date'] = $return;
        }

        /** @Field(type="integer") */
        if (isset($data['totalRooms'])) {
            $value = $data['totalRooms'];
            $return = (int) $value;
            $this->class->reflFields['totalRooms']->setValue($document, $return);
            $hydratedData['totalRooms'] = $return;
        }

        /** @Field(type="integer") */
        if (isset($data['packagesCount'])) {
            $value = $data['packagesCount'];
            $return = (int) $value;
            $this->class->reflFields['packagesCount']->setValue($document, $return);
            $hydratedData['packagesCount'] = $return;
        }

        /** @Field(type="integer") */
        if (isset($data['leftRooms'])) {
            $value = $data['leftRooms'];
            $return = (int) $value;
            $this->class->reflFields['leftRooms']->setValue($document, $return);
            $hydratedData['leftRooms'] = $return;
        }

        /** @Many */
        $mongoData = isset($data['packageInfo']) ? $data['packageInfo'] : null;
        $return = new \Doctrine\ODM\MongoDB\PersistentCollection(new \Doctrine\Common\Collections\ArrayCollection(), $this->dm, $this->unitOfWork);
        $return->setHints($hints);
        $return->setOwner($document, $this->class->fieldMappings['packageInfo']);
        $return->setInitialized(false);
        if ($mongoData) {
            $return->setMongoData($mongoData);
        }
        $this->class->reflFields['packageInfo']->setValue($document, $return);
        $hydratedData['packageInfo'] = $return;

        /** @Field(type="boolean") */
        if (isset($data['isClosed'])) {
            $value = $data['isClosed'];
            $return = (bool) $value;
            $this->class->reflFields['isClosed']->setValue($document, $return);
            $hydratedData['isClosed'] = $return;
        }

        /** @Field(type="id") */
        if (isset($data['_id'])) {
            $value = $data['_id'];
            $return = $value instanceof \MongoId ? (string) $value : $value;
            $this->class->reflFields['id']->setValue($document, $return);
            $hydratedData['id'] = $return;
        }

        /** @Field(type="boolean") */
        if (isset($data['isEnabled'])) {
            $value = $data['isEnabled'];
            $return = (bool) $value;
            $this->class->reflFields['isEnabled']->setValue($document, $return);
            $hydratedData['isEnabled'] = $return;
        }
        return $hydratedData;
    }
}