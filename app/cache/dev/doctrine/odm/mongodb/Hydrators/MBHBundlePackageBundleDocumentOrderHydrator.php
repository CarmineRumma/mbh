<?php

namespace Hydrators;

use Doctrine\ODM\MongoDB\DocumentManager;
use Doctrine\ODM\MongoDB\Mapping\ClassMetadata;
use Doctrine\ODM\MongoDB\Hydrator\HydratorInterface;
use Doctrine\ODM\MongoDB\UnitOfWork;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ODM. DO NOT EDIT THIS FILE.
 */
class MBHBundlePackageBundleDocumentOrderHydrator implements HydratorInterface
{
    private $dm;
    private $unitOfWork;
    private $class;

    public function __construct(DocumentManager $dm, UnitOfWork $uow, ClassMetadata $class)
    {
        $this->dm = $dm;
        $this->unitOfWork = $uow;
        $this->class = $class;
    }

    public function hydrate($document, $data, array $hints = array())
    {
        $hydratedData = array();

        /** @Field(type="int_id") */
        if (isset($data['_id'])) {
            $value = $data['_id'];
            $return = (int) $value;
            $this->class->reflFields['id']->setValue($document, $return);
            $hydratedData['id'] = $return;
        }

        /** @ReferenceOne */
        if (isset($data['source'])) {
            $reference = $data['source'];
            if (isset($this->class->fieldMappings['source']['simple']) && $this->class->fieldMappings['source']['simple']) {
                $className = $this->class->fieldMappings['source']['targetDocument'];
                $mongoId = $reference;
            } else {
                $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['source'], $reference);
                $mongoId = $reference['$id'];
            }
            $targetMetadata = $this->dm->getClassMetadata($className);
            $id = $targetMetadata->getPHPIdentifierValue($mongoId);
            $return = $this->dm->getReference($className, $id);
            $this->class->reflFields['source']->setValue($document, $return);
            $hydratedData['source'] = $return;
        }

        /** @Many */
        $mongoData = isset($data['packages']) ? $data['packages'] : null;
        $return = new \Doctrine\ODM\MongoDB\PersistentCollection(new \Doctrine\Common\Collections\ArrayCollection(), $this->dm, $this->unitOfWork);
        $return->setHints($hints);
        $return->setOwner($document, $this->class->fieldMappings['packages']);
        $return->setInitialized(false);
        if ($mongoData) {
            $return->setMongoData($mongoData);
        }
        $this->class->reflFields['packages']->setValue($document, $return);
        $hydratedData['packages'] = $return;

        /** @ReferenceOne */
        if (isset($data['mainTourist'])) {
            $reference = $data['mainTourist'];
            if (isset($this->class->fieldMappings['mainTourist']['simple']) && $this->class->fieldMappings['mainTourist']['simple']) {
                $className = $this->class->fieldMappings['mainTourist']['targetDocument'];
                $mongoId = $reference;
            } else {
                $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['mainTourist'], $reference);
                $mongoId = $reference['$id'];
            }
            $targetMetadata = $this->dm->getClassMetadata($className);
            $id = $targetMetadata->getPHPIdentifierValue($mongoId);
            $return = $this->dm->getReference($className, $id);
            $this->class->reflFields['mainTourist']->setValue($document, $return);
            $hydratedData['mainTourist'] = $return;
        }

        /** @ReferenceOne */
        if (isset($data['organization'])) {
            $reference = $data['organization'];
            if (isset($this->class->fieldMappings['organization']['simple']) && $this->class->fieldMappings['organization']['simple']) {
                $className = $this->class->fieldMappings['organization']['targetDocument'];
                $mongoId = $reference;
            } else {
                $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['organization'], $reference);
                $mongoId = $reference['$id'];
            }
            $targetMetadata = $this->dm->getClassMetadata($className);
            $id = $targetMetadata->getPHPIdentifierValue($mongoId);
            $return = $this->dm->getReference($className, $id);
            $this->class->reflFields['organization']->setValue($document, $return);
            $hydratedData['organization'] = $return;
        }

        /** @Many */
        $mongoData = isset($data['cashDocuments']) ? $data['cashDocuments'] : null;
        $return = new \Doctrine\ODM\MongoDB\PersistentCollection(new \Doctrine\Common\Collections\ArrayCollection(), $this->dm, $this->unitOfWork);
        $return->setHints($hints);
        $return->setOwner($document, $this->class->fieldMappings['cashDocuments']);
        $return->setInitialized(false);
        if ($mongoData) {
            $return->setMongoData($mongoData);
        }
        $this->class->reflFields['cashDocuments']->setValue($document, $return);
        $hydratedData['cashDocuments'] = $return;

        /** @Field(type="float") */
        if (isset($data['price'])) {
            $value = $data['price'];
            $return = (float) $value;
            $this->class->reflFields['price']->setValue($document, $return);
            $hydratedData['price'] = $return;
        }

        /** @Field(type="float") */
        if (isset($data['originalPrice'])) {
            $value = $data['originalPrice'];
            $return = (float) $value;
            $this->class->reflFields['originalPrice']->setValue($document, $return);
            $hydratedData['originalPrice'] = $return;
        }

        /** @Field(type="float") */
        if (isset($data['totalOverwrite'])) {
            $value = $data['totalOverwrite'];
            $return = (float) $value;
            $this->class->reflFields['totalOverwrite']->setValue($document, $return);
            $hydratedData['totalOverwrite'] = $return;
        }

        /** @Field(type="float") */
        if (isset($data['paid'])) {
            $value = $data['paid'];
            $return = (float) $value;
            $this->class->reflFields['paid']->setValue($document, $return);
            $hydratedData['paid'] = $return;
        }

        /** @Field(type="boolean") */
        if (isset($data['isPaid'])) {
            $value = $data['isPaid'];
            $return = (bool) $value;
            $this->class->reflFields['isPaid']->setValue($document, $return);
            $hydratedData['isPaid'] = $return;
        }

        /** @Field(type="boolean") */
        if (isset($data['confirmed'])) {
            $value = $data['confirmed'];
            $return = (bool) $value;
            $this->class->reflFields['confirmed']->setValue($document, $return);
            $hydratedData['confirmed'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['status'])) {
            $value = $data['status'];
            $return = (string) $value;
            $this->class->reflFields['status']->setValue($document, $return);
            $hydratedData['status'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['onlinePaymentType'])) {
            $value = $data['onlinePaymentType'];
            $return = (string) $value;
            $this->class->reflFields['onlinePaymentType']->setValue($document, $return);
            $hydratedData['onlinePaymentType'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['channelManagerType'])) {
            $value = $data['channelManagerType'];
            $return = (string) $value;
            $this->class->reflFields['channelManagerType']->setValue($document, $return);
            $hydratedData['channelManagerType'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['channelManagerId'])) {
            $value = $data['channelManagerId'];
            $return = (string) $value;
            $this->class->reflFields['channelManagerId']->setValue($document, $return);
            $hydratedData['channelManagerId'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['channelManagerHumanId'])) {
            $value = $data['channelManagerHumanId'];
            $return = (string) $value;
            $this->class->reflFields['channelManagerHumanId']->setValue($document, $return);
            $hydratedData['channelManagerHumanId'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['channelManagerHumanText'])) {
            $value = $data['channelManagerHumanText'];
            $return = (string) $value;
            $this->class->reflFields['channelManagerHumanText']->setValue($document, $return);
            $hydratedData['channelManagerHumanText'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['channelManagerEditDateTime'])) {
            $value = $data['channelManagerEditDateTime'];
            $return = (string) $value;
            $this->class->reflFields['channelManagerEditDateTime']->setValue($document, $return);
            $hydratedData['channelManagerEditDateTime'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['channelManagerStatus'])) {
            $value = $data['channelManagerStatus'];
            $return = (string) $value;
            $this->class->reflFields['channelManagerStatus']->setValue($document, $return);
            $hydratedData['channelManagerStatus'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['note'])) {
            $value = $data['note'];
            $return = (string) $value;
            $this->class->reflFields['note']->setValue($document, $return);
            $hydratedData['note'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['card'])) {
            $value = $data['card'];
            $return = (string) $value;
            $this->class->reflFields['card']->setValue($document, $return);
            $hydratedData['card'] = $return;
        }

        /** @Many */
        $mongoData = isset($data['pollQuestions']) ? $data['pollQuestions'] : null;
        $return = new \Doctrine\ODM\MongoDB\PersistentCollection(new \Doctrine\Common\Collections\ArrayCollection(), $this->dm, $this->unitOfWork);
        $return->setHints($hints);
        $return->setOwner($document, $this->class->fieldMappings['pollQuestions']);
        $return->setInitialized(false);
        if ($mongoData) {
            $return->setMongoData($mongoData);
        }
        $this->class->reflFields['pollQuestions']->setValue($document, $return);
        $hydratedData['pollQuestions'] = $return;

        /** @EmbedOne */
        if (isset($data['creditCard'])) {
            $embeddedDocument = $data['creditCard'];
            $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['creditCard'], $embeddedDocument);
            $embeddedMetadata = $this->dm->getClassMetadata($className);
            $return = $embeddedMetadata->newInstance();

            $this->unitOfWork->setParentAssociation($return, $this->class->fieldMappings['creditCard'], $document, 'creditCard');

            $embeddedData = $this->dm->getHydratorFactory()->hydrate($return, $embeddedDocument, $hints);
            $embeddedId = $embeddedMetadata->identifier && isset($embeddedData[$embeddedMetadata->identifier]) ? $embeddedData[$embeddedMetadata->identifier] : null;

            $this->unitOfWork->registerManaged($return, $embeddedId, $embeddedData);

            $this->class->reflFields['creditCard']->setValue($document, $return);
            $hydratedData['creditCard'] = $return;
        }

        /** @Many */
        $mongoData = isset($data['documents']) ? $data['documents'] : null;
        $return = new \Doctrine\ODM\MongoDB\PersistentCollection(new \Doctrine\Common\Collections\ArrayCollection(), $this->dm, $this->unitOfWork);
        $return->setHints($hints);
        $return->setOwner($document, $this->class->fieldMappings['documents']);
        $return->setInitialized(false);
        if ($mongoData) {
            $return->setMongoData($mongoData);
        }
        $this->class->reflFields['documents']->setValue($document, $return);
        $hydratedData['documents'] = $return;

        /** @Field(type="boolean") */
        if (isset($data['isEnabled'])) {
            $value = $data['isEnabled'];
            $return = (bool) $value;
            $this->class->reflFields['isEnabled']->setValue($document, $return);
            $hydratedData['isEnabled'] = $return;
        }

        /** @Field(type="date") */
        if (isset($data['createdAt'])) {
            $value = $data['createdAt'];
            if ($value === null) { $return = null; } else { $return = \Doctrine\ODM\MongoDB\Types\DateType::getDateTime($value); }
            $this->class->reflFields['createdAt']->setValue($document, clone $return);
            $hydratedData['createdAt'] = $return;
        }

        /** @Field(type="date") */
        if (isset($data['updatedAt'])) {
            $value = $data['updatedAt'];
            if ($value === null) { $return = null; } else { $return = \Doctrine\ODM\MongoDB\Types\DateType::getDateTime($value); }
            $this->class->reflFields['updatedAt']->setValue($document, clone $return);
            $hydratedData['updatedAt'] = $return;
        }

        /** @Field(type="date") */
        if (isset($data['deletedAt'])) {
            $value = $data['deletedAt'];
            if ($value === null) { $return = null; } else { $return = \Doctrine\ODM\MongoDB\Types\DateType::getDateTime($value); }
            $this->class->reflFields['deletedAt']->setValue($document, clone $return);
            $hydratedData['deletedAt'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['createdBy'])) {
            $value = $data['createdBy'];
            $return = (string) $value;
            $this->class->reflFields['createdBy']->setValue($document, $return);
            $hydratedData['createdBy'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['updatedBy'])) {
            $value = $data['updatedBy'];
            $return = (string) $value;
            $this->class->reflFields['updatedBy']->setValue($document, $return);
            $hydratedData['updatedBy'] = $return;
        }
        return $hydratedData;
    }
}