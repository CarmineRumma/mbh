<?php

namespace Hydrators;

use Doctrine\ODM\MongoDB\DocumentManager;
use Doctrine\ODM\MongoDB\Mapping\ClassMetadata;
use Doctrine\ODM\MongoDB\Hydrator\HydratorInterface;
use Doctrine\ODM\MongoDB\UnitOfWork;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ODM. DO NOT EDIT THIS FILE.
 */
class MBHBundleClientBundleDocumentClientConfigHydrator implements HydratorInterface
{
    private $dm;
    private $unitOfWork;
    private $class;

    public function __construct(DocumentManager $dm, UnitOfWork $uow, ClassMetadata $class)
    {
        $this->dm = $dm;
        $this->unitOfWork = $uow;
        $this->class = $class;
    }

    public function hydrate($document, $data, array $hints = array())
    {
        $hydratedData = array();

        /** @Field(type="boolean") */
        if (isset($data['isSendSms'])) {
            $value = $data['isSendSms'];
            $return = (bool) $value;
            $this->class->reflFields['isSendSms']->setValue($document, $return);
            $hydratedData['isSendSms'] = $return;
        }

        /** @Field(type="boolean") */
        if (isset($data['useRoomTypeCategory'])) {
            $value = $data['useRoomTypeCategory'];
            $return = (bool) $value;
            $this->class->reflFields['useRoomTypeCategory']->setValue($document, $return);
            $hydratedData['useRoomTypeCategory'] = $return;
        }

        /** @Field(type="integer") */
        if (isset($data['searchDates'])) {
            $value = $data['searchDates'];
            $return = (int) $value;
            $this->class->reflFields['searchDates']->setValue($document, $return);
            $hydratedData['searchDates'] = $return;
        }

        /** @Field(type="boolean") */
        if (isset($data['searchWindows'])) {
            $value = $data['searchWindows'];
            $return = (bool) $value;
            $this->class->reflFields['searchWindows']->setValue($document, $return);
            $hydratedData['searchWindows'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['paymentSystem'])) {
            $value = $data['paymentSystem'];
            $return = (string) $value;
            $this->class->reflFields['paymentSystem']->setValue($document, $return);
            $hydratedData['paymentSystem'] = $return;
        }

        /** @EmbedOne */
        if (isset($data['robokassa'])) {
            $embeddedDocument = $data['robokassa'];
            $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['robokassa'], $embeddedDocument);
            $embeddedMetadata = $this->dm->getClassMetadata($className);
            $return = $embeddedMetadata->newInstance();

            $this->unitOfWork->setParentAssociation($return, $this->class->fieldMappings['robokassa'], $document, 'robokassa');

            $embeddedData = $this->dm->getHydratorFactory()->hydrate($return, $embeddedDocument, $hints);
            $embeddedId = $embeddedMetadata->identifier && isset($embeddedData[$embeddedMetadata->identifier]) ? $embeddedData[$embeddedMetadata->identifier] : null;

            $this->unitOfWork->registerManaged($return, $embeddedId, $embeddedData);

            $this->class->reflFields['robokassa']->setValue($document, $return);
            $hydratedData['robokassa'] = $return;
        }

        /** @EmbedOne */
        if (isset($data['payanyway'])) {
            $embeddedDocument = $data['payanyway'];
            $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['payanyway'], $embeddedDocument);
            $embeddedMetadata = $this->dm->getClassMetadata($className);
            $return = $embeddedMetadata->newInstance();

            $this->unitOfWork->setParentAssociation($return, $this->class->fieldMappings['payanyway'], $document, 'payanyway');

            $embeddedData = $this->dm->getHydratorFactory()->hydrate($return, $embeddedDocument, $hints);
            $embeddedId = $embeddedMetadata->identifier && isset($embeddedData[$embeddedMetadata->identifier]) ? $embeddedData[$embeddedMetadata->identifier] : null;

            $this->unitOfWork->registerManaged($return, $embeddedId, $embeddedData);

            $this->class->reflFields['payanyway']->setValue($document, $return);
            $hydratedData['payanyway'] = $return;
        }

        /** @EmbedOne */
        if (isset($data['moneymail'])) {
            $embeddedDocument = $data['moneymail'];
            $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['moneymail'], $embeddedDocument);
            $embeddedMetadata = $this->dm->getClassMetadata($className);
            $return = $embeddedMetadata->newInstance();

            $this->unitOfWork->setParentAssociation($return, $this->class->fieldMappings['moneymail'], $document, 'moneymail');

            $embeddedData = $this->dm->getHydratorFactory()->hydrate($return, $embeddedDocument, $hints);
            $embeddedId = $embeddedMetadata->identifier && isset($embeddedData[$embeddedMetadata->identifier]) ? $embeddedData[$embeddedMetadata->identifier] : null;

            $this->unitOfWork->registerManaged($return, $embeddedId, $embeddedData);

            $this->class->reflFields['moneymail']->setValue($document, $return);
            $hydratedData['moneymail'] = $return;
        }

        /** @EmbedOne */
        if (isset($data['uniteller'])) {
            $embeddedDocument = $data['uniteller'];
            $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['uniteller'], $embeddedDocument);
            $embeddedMetadata = $this->dm->getClassMetadata($className);
            $return = $embeddedMetadata->newInstance();

            $this->unitOfWork->setParentAssociation($return, $this->class->fieldMappings['uniteller'], $document, 'uniteller');

            $embeddedData = $this->dm->getHydratorFactory()->hydrate($return, $embeddedDocument, $hints);
            $embeddedId = $embeddedMetadata->identifier && isset($embeddedData[$embeddedMetadata->identifier]) ? $embeddedData[$embeddedMetadata->identifier] : null;

            $this->unitOfWork->registerManaged($return, $embeddedId, $embeddedData);

            $this->class->reflFields['uniteller']->setValue($document, $return);
            $hydratedData['uniteller'] = $return;
        }

        /** @EmbedOne */
        if (isset($data['rbk'])) {
            $embeddedDocument = $data['rbk'];
            $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['rbk'], $embeddedDocument);
            $embeddedMetadata = $this->dm->getClassMetadata($className);
            $return = $embeddedMetadata->newInstance();

            $this->unitOfWork->setParentAssociation($return, $this->class->fieldMappings['rbk'], $document, 'rbk');

            $embeddedData = $this->dm->getHydratorFactory()->hydrate($return, $embeddedDocument, $hints);
            $embeddedId = $embeddedMetadata->identifier && isset($embeddedData[$embeddedMetadata->identifier]) ? $embeddedData[$embeddedMetadata->identifier] : null;

            $this->unitOfWork->registerManaged($return, $embeddedId, $embeddedData);

            $this->class->reflFields['rbk']->setValue($document, $return);
            $hydratedData['rbk'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['successUrl'])) {
            $value = $data['successUrl'];
            $return = (string) $value;
            $this->class->reflFields['successUrl']->setValue($document, $return);
            $hydratedData['successUrl'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['failUrl'])) {
            $value = $data['failUrl'];
            $return = (string) $value;
            $this->class->reflFields['failUrl']->setValue($document, $return);
            $hydratedData['failUrl'] = $return;
        }

        /** @Field(type="boolean") */
        if (isset($data['isInstantSearch'])) {
            $value = $data['isInstantSearch'];
            $return = (bool) $value;
            $this->class->reflFields['isInstantSearch']->setValue($document, $return);
            $hydratedData['isInstantSearch'] = $return;
        }

        /** @Field(type="id") */
        if (isset($data['_id'])) {
            $value = $data['_id'];
            $return = $value instanceof \MongoId ? (string) $value : $value;
            $this->class->reflFields['id']->setValue($document, $return);
            $hydratedData['id'] = $return;
        }

        /** @Field(type="boolean") */
        if (isset($data['isEnabled'])) {
            $value = $data['isEnabled'];
            $return = (bool) $value;
            $this->class->reflFields['isEnabled']->setValue($document, $return);
            $hydratedData['isEnabled'] = $return;
        }

        /** @Field(type="date") */
        if (isset($data['createdAt'])) {
            $value = $data['createdAt'];
            if ($value === null) { $return = null; } else { $return = \Doctrine\ODM\MongoDB\Types\DateType::getDateTime($value); }
            $this->class->reflFields['createdAt']->setValue($document, clone $return);
            $hydratedData['createdAt'] = $return;
        }

        /** @Field(type="date") */
        if (isset($data['updatedAt'])) {
            $value = $data['updatedAt'];
            if ($value === null) { $return = null; } else { $return = \Doctrine\ODM\MongoDB\Types\DateType::getDateTime($value); }
            $this->class->reflFields['updatedAt']->setValue($document, clone $return);
            $hydratedData['updatedAt'] = $return;
        }

        /** @Field(type="date") */
        if (isset($data['deletedAt'])) {
            $value = $data['deletedAt'];
            if ($value === null) { $return = null; } else { $return = \Doctrine\ODM\MongoDB\Types\DateType::getDateTime($value); }
            $this->class->reflFields['deletedAt']->setValue($document, clone $return);
            $hydratedData['deletedAt'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['createdBy'])) {
            $value = $data['createdBy'];
            $return = (string) $value;
            $this->class->reflFields['createdBy']->setValue($document, $return);
            $hydratedData['createdBy'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['updatedBy'])) {
            $value = $data['updatedBy'];
            $return = (string) $value;
            $this->class->reflFields['updatedBy']->setValue($document, $return);
            $hydratedData['updatedBy'] = $return;
        }
        return $hydratedData;
    }
}